import sys
import os
import shutil
import datetime
import logging
from utils.constants import *

logger = logging.getLogger(__name__)

# L·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c AppData/Roaming c·ªßa ng∆∞·ªùi d√πng
appdata_dir = os.getenv('APPDATA')

# T·∫°o th·ªùi gian ghi log
today = str(datetime.datetime.now().strftime("%Y-%m-%d-%H-%M-%S")) #chua ngay thang nam cung voi gio phut giay
date_today = str(datetime.datetime.now().strftime("%d-%m-%y")) # ch·ªâ ch·ª©a ng√†y th√°ng nƒÉm

# S·ªë ng√†y l∆∞u tr·ªØ log, n·∫øu qu√° th·ªùi gian n√†y th√¨ t·ª± ƒë·ªông x√≥a t·ªáp
LOG_EXPIRATION_DAYS = 15

# ƒê·ªãnh nghƒ©a th∆∞ m·ª•c ch·ª©a log: AppData/Roaming/LOG_FOLDER/log
log_root_dir = os.path.join(appdata_dir, APP_FOLDER_LOG, "log")

# T·∫°o th∆∞ m·ª•c ch·ª©a nh·∫≠t k√Ω theo ng√†y th√°ng nƒÉm, n·∫øu th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i th√¨ kh√¥ng t·∫°o n·ªØa
# C:\\Users\\238299\\AppData\\Roaming\QL nh√¢n s·ª±\\log\\03-03-25
save_dir_log = os.path.join(appdata_dir, APP_FOLDER_LOG, "log", date_today)
os.makedirs(save_dir_log, exist_ok=True)

# T·∫°o 2 t·ªáp ch·ª©a log v√† c√°c c√¢u l·ªánh print n·∫øu t·ªìn t·∫°i
log_file_path = save_dir_log +"/log.log"
log_print_app = save_dir_log + "/system_out.log"

# Ghi t·∫•t c·∫£ c√°c th√¥ng b√°o b·∫±ng ph∆∞∆°ng th·ª©c print v√†o file log v√† c√°c l·ªói xu·∫•t hi·ªán v√†o file log_print_app
# B·ªüi v√¨ khi ƒë√≥ng g√≥i ·ª©ng d·ª•ng th√¨ s·∫Ω kh√¥ng c√≥ terminal hi·ªÉn th·ªã c√°c th√¥ng tin n√†y, v√¨ v·∫≠y c·∫ßn l∆∞u v√†o file
# V·ªõi ph∆∞∆°ng th·ª©c open th√¨ s·∫Ω t·ª± ƒë·ªông t·∫°o file log n·∫øu n√≥ ch∆∞a t·ªìn t·∫°i
sys.stdout = open(log_print_app, encoding="utf-8", mode="a")
sys.stderr = open(log_print_app, encoding="utf-8", mode="a")

def delete_old_logs():
    """
    X√≥a c√°c th∆∞ m·ª•c log ƒë√£ t·ªìn t·∫°i qu√° th·ªùi gian l∆∞u tr·ªØ cho ph√©p.
    """
    # Kh√¥ng c√≥ th∆∞ m·ª•c log th√¨ kh√¥ng c·∫ßn l√†m g√¨
    if not os.path.exists(log_root_dir):
        return  

    # L·∫•y ng√†y hi·ªán t·∫°i
    now = datetime.datetime.now()

    # Duy·ªát t·∫•t c·∫£ c√°c th∆∞ m·ª•c con trong th∆∞ m·ª•c `log` ch·ª©a c√°c th∆∞ m·ª•c log con
    for folder in os.listdir(log_root_dir):
        folder_path = os.path.join(log_root_dir, folder)

        # Ki·ªÉm tra n·∫øu n√≥ l√† th∆∞ m·ª•c (v√¨ m·ªói ng√†y l√† m·ªôt th∆∞ m·ª•c ri√™ng)
        if os.path.isdir(folder_path):
            try:
                # L·∫•y th·ªùi gian ch·ªânh s·ª≠a cu·ªëi c√πng c·ªßa th∆∞ m·ª•c
                folder_mod_time = datetime.datetime.fromtimestamp(os.stat(folder_path).st_mtime)

                # Ki·ªÉm tra n·∫øu th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i qu√° 30 ng√†y
                if (now - folder_mod_time).days > LOG_EXPIRATION_DAYS:
                    # X√≥a to√†n b·ªô th∆∞ m·ª•c v√† n·ªôi dung b√™n trong
                    logger.info(f"üóëÔ∏è X√≥a th∆∞ m·ª•c log c≈©: {folder_path}")
                    # os.remove(folder_path)  # os g·∫∑p l·ªói Access is denied, chuy·ªÉn sang shutil
                    shutil.rmtree(folder_path)

            except Exception as e:
                logger.error(f"‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c {folder_path}: {e}")

def change_log_file_path(logger_root: logging, new_log_file_path = None):
    """
    Thay ƒë·ªïi v·ªã tr√≠ t·ªáp log m√† kh√¥ng thay ƒë·ªïi c√°c thi·∫øt l·∫≠p kh√°c c·ªßa logger.  
    D√πng cho tr∆∞·ªùng h·ª£p sang 1 ng√†y m·ªõi, t·ª± ƒë·ªông chuy·ªÉn sang v·ªã tr√≠ log m·ªõi

    - N·∫øu logger_root ƒë∆∞·ª£c truy·ªÅn v√†o l√† `logger = logging.getLogger(__name__)` th√¨ n√≥ ch·ªâ ·∫£nh h∆∞·ª°ng m·ªói t·ªáp ƒë√≥
    """
    # N·∫øu kh√¥ng ch·ªâ ƒë·ªãnh v·ªã tr√≠ m·ªõi th√¨ t·ª± t·∫°o th∆∞ m·ª•c theo ng√†y th√°ng nƒÉm
    if new_log_file_path is None:
        # data test: 
        # current_today = str((datetime.datetime.now() + datetime.timedelta(days=1)).strftime("%d-%m-%y")) # TƒÉng th√™m 1 ng√†y

        # T·∫°o th·ªùi gian ghi log
        current_today = str(datetime.datetime.now().strftime("%d-%m-%y"))
        # C:\\Users\\238299\\AppData\\Roaming\QLNS\\log\\03-03-25
        new_dir_log = os.path.join(appdata_dir, APP_FOLDER_LOG, "log", current_today)

        # T·∫°o 2 t·ªáp ch·ª©a log v√† c√°c c√¢u l·ªánh print n·∫øu t·ªìn t·∫°i
        new_log_file_path = new_dir_log +"/log.txt"
        new_log_print_app = new_dir_log + "/system_out.txt"
    
    # Ki·ªÉm tra xem th∆∞ m·ª•c ch·ª©a log ƒë√£ ƒë∆∞·ª£c t·∫°o ch∆∞a, n·∫øu ch∆∞a c√≥ th√¨ m·ªõi th·ª±c hi·ªán t·∫°o v√† thay ƒë·ªïi log, n·∫øu c√≥ th√¨ b·ªè qua
    if not os.path.exists(new_dir_log):

        # Khai b√°o l√† bi·∫øn to√†n c·ª•c ƒë·ªÉ s·ª≠ d·ª•ng bi·∫øn log_file_path
        global log_file_path
        # Ghi log
        logger.info("Thay ƒë·ªïi v·ªã tr√≠ l∆∞u log m·ªõi t·ª´: %s sang v·ªã tr√≠: %s", log_file_path, new_log_file_path)

        # Ki·ªÉm tra v√† x√≥a c√°c th∆∞ m·ª•c c≈© ƒë√£ t·ªìn t·∫°i qu√° l√¢u
        delete_old_logs()
        try:
            # Tao th∆∞ m·ª•c m·ªõi
            os.makedirs(new_dir_log)

            # X√≥a t·∫•t c·∫£ c√°c handler c≈© c·ªßa logger
            for handler in logger_root.handlers[:]:
                handler.close()  # ƒê√≥ng handler c≈©
                logger_root.removeHandler(handler)  # X√≥a handler c≈©

            # T·∫°o m·ªôt FileHandler m·ªõi v·ªõi v·ªã tr√≠ t·ªáp log m·ªõi
            file_handler = logging.FileHandler(new_log_file_path, mode='a', encoding='utf-8')
        
            # ƒê·ªãnh d·∫°ng cho log
            formatter = logging.Formatter('%(asctime)s %(levelname)s:\t %(filename)s - Line: %(lineno)d message: %(message)s',
                                           datefmt='%d/%m/%Y %I:%M:%S %p')
            file_handler.setFormatter(formatter)
        
            # Th√™m FileHandler m·ªõi v√†o logger
            logger_root.addHandler(file_handler)
            
            # Thi·∫øt l·∫≠p m·ª©c ƒë·ªô log (n·∫øu c·∫ßn thi·∫øt)
            logger_root.setLevel(logging.INFO)
            
            # N·∫øu ƒë·∫ßu ra c·ªßa c√°c ph∆∞∆°ng th·ª©c kh√°c v·ªõi m·∫∑c ƒë·ªãnh, t·ª©c l√† ƒëang ƒë∆∞·ª£c ghi ·ªü 1 t·ªáp n√†o ƒë√≥, th√¨ ƒë√≥ng n√≥ ƒë·ªÉ kh√¥ng g√¢y r√≤ r·ªâ t√†i nguy√™n
            # ƒê√≥ng file c≈© n·∫øu ƒëang redirect
            try:
                if sys.stdout not in (sys.__stdout__, sys.__stderr__):
                    sys.stdout.close()
            except Exception as e:
                logger.error("Kh√¥ng th·ªÉ ƒë√≥ng print ƒë·∫ßu ra m·∫∑c ƒë·ªãnh: %s", e, exc_info=True)
            try:
                if sys.stderr not in (sys.__stdout__, sys.__stderr__):
                    sys.stderr.close()
            except Exception as e:
                logger.error("Kh√¥ng th·ªÉ error ƒë√≥ng ƒë·∫ßu ra m·∫∑c ƒë·ªãnh: %s", e, exc_info=True)

            # Tr·∫£ l·∫°i v·ªÅ m·∫∑c ƒë·ªãnh tr∆∞·ªõc khi m·ªü file m·ªõi
            sys.stdout = sys.__stdout__
            sys.stderr = sys.__stderr__

            # M·ªü file m·ªõi cho ng√†y m·ªõi
            sys.stdout = open(new_log_print_app, encoding="utf-8", mode="a")
            sys.stderr = open(new_log_print_app, encoding="utf-8", mode="a")

            # ƒê·∫∑t l·∫°i t√™n th∆∞ m·ª•c log
            # Khi thay ƒë·ªïi gi√° tr·ªã c·ªßa bi·∫øn to√†n c·ª•c n·∫±m trong h√†m th√¨ b·∫Øt bu·ªôc ph·∫£i s·ª≠ d·ª•ng khai b√°o global (N·∫øu kh√¥ng n√≥ s·∫Ω t·ª± hi·ªÉu ƒë√¢y l√† bi·∫øn c·ª•c b·ªô) 
            log_file_path = new_log_file_path
            return True
        
        except Exception as e:
            logger.error("Kh√¥ng th·ªÉ thay ƒë·ªïi v·ªã tr√≠ l∆∞u t·ªáp log. L·ªói: %s", e)
            return False
    
    else:
        # N·∫øu th∆∞ m·ª•c n√†y ƒë√£ t·ªìn t·∫°i th√¨ kh√¥ng l√†m g√¨ c·∫£
        return True