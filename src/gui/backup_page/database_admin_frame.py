# -*- coding: utf-8 -*-
"""
DatabaseAdminFrame (s·ª≠ d·ª•ng k·∫øt n·ªëi c≈©: self.owner.conn, KH√îNG nh√∫ng Dashboard)
-------------------------------------------------------------------------------
- Sidebar: Recovery Model / Ki·ªÉm tra th∆∞ m·ª•c / Retention / Orphan Users / DBCC CHECKDB
- Content: m·ªói m·ª•c l√† 1 sub-frame, lazy-load.
- T·∫•t c·∫£ thao t√°c n·∫∑ng ch·∫°y n·ªÅn (thread) ƒë·ªÉ UI kh√¥ng ƒë∆°.
- D√πng l·∫°i k·∫øt n·ªëi c√≥ s·∫µn t·ª´ self.owner.conn (pyodbc.Connection).
- Kh√¥ng ki·ªÉm tra k·∫øt n·ªëi ·ªü __init__; ch·ªâ ki·ªÉm tra tr∆∞·ªõc khi th·ª±c thi t√°c v·ª•.
- (Tu·ª≥ ch·ªçn) N·∫øu owner c√≥ h√†m emit_dashboard_event(ev:dict) th√¨ s·∫Ω ph√°t s·ª± ki·ªán realtime;
  c√≤n n·∫øu kh√¥ng c√≥, s·∫Ω b·ªè qua (kh√¥ng l·ªói).
"""

import os
import time
import queue
import threading
import datetime as dt
from typing import Any, Dict, List, Optional, Tuple

import customtkinter as ctk
from tkinter import ttk, filedialog, messagebox


SYSTEM_DATABASES = {"master", "model", "msdb", "tempdb"}


# =====================================================================
# C√°c ti·ªán √≠ch k·∫øt n·ªëi/SQL an to√†n
# =====================================================================

def _test_connection(conn) -> bool:
    """
    Ki·ªÉm tra nhanh k·∫øt n·ªëi c√≥ c√≤n d√πng ƒë∆∞·ª£c kh√¥ng (SELECT 1).
    - Kh√¥ng g·ªçi ·ªü __init__; ch·ªâ g·ªçi ngay tr∆∞·ªõc khi thao t√°c.
    """
    try:
        cur = conn.cursor()
        cur.execute("SELECT 1")
        cur.fetchone()
        cur.close()
        return True
    except Exception:
        return False


def run_sql_safe(conn, sql: str, params: Tuple = (), autocommit: bool = True) -> Tuple[bool, str, Optional[list]]:
    """
    Th·ª±c thi 1 c√¢u SQL an to√†n:
    - B·∫≠t autocommit t·∫°m th·ªùi (n·∫øu c·∫ßn), kh√¥i ph·ª•c sau.
    - Tr·∫£ (ok, message, rows) thay v√¨ raise ƒë·ªÉ UI hi·ªÉn th·ªã th√¢n thi·ªán.
    - rows: fetchall() n·∫øu c√≥ (SELECT), ng∆∞·ª£c l·∫°i l√† None.
    """
    cur = None
    prev = getattr(conn, "autocommit", False)
    try:
        conn.autocommit = autocommit
        cur = conn.cursor()
        cur.execute(sql, params)
        rows = None
        try:
            rows = cur.fetchall()
        except Exception:
            rows = None
        return True, "OK", rows
    except Exception as e:
        return False, f"{e}", None
    finally:
        try:
            if cur:
                cur.close()
        except Exception:
            pass
        try:
            conn.autocommit = prev
        except Exception:
            pass


# =====================================================================
# Frame ch√≠nh: KH√îNG c√≥ Dashboard b√™n trong
# =====================================================================

class DatabaseAdminFrame(ctk.CTkFrame):
    """
    Khung qu·∫£n tr·ªã CSDL:
    - B√™n tr√°i: Sidebar ch·ªçn module
    - B√™n ph·∫£i: Content hi·ªÉn th·ªã module (lazy-load)
    - D√πng k·∫øt n·ªëi self.owner.conn (pyodbc.Connection) do trang ch·ªß cung c·∫•p.
    """

    def __init__(self, parent, owner_page):
        """
        Args:
            parent: widget cha
            owner_page: trang cha (ph·∫£i c√≥ self.conn l√† pyodbc.Connection sau khi ƒëƒÉng nh·∫≠p/k·∫øt n·ªëi)
        """
        super().__init__(parent)
        self.owner = owner_page

        # Layout 1x2
        self.grid_rowconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)

        # Sidebar
        self.sidebar = ctk.CTkFrame(self)
        self.sidebar.grid(row=0, column=0, sticky="nsew")
        self.sidebar.grid_rowconfigure(10, weight=1)

        ctk.CTkLabel(self.sidebar, text="Qu·∫£n tr·ªã CSDL", font=ctk.CTkFont(size=18, weight="bold")).grid(
            row=0, column=0, padx=12, pady=(12, 8)
        )
        self.btn_recovery  = ctk.CTkButton(self.sidebar, text="‚ôª Recovery Model", command=self._open_recovery)
        self.btn_perm      = ctk.CTkButton(self.sidebar, text="üóÇ Ki·ªÉm tra th∆∞ m·ª•c", command=self._open_perm)
        self.btn_retention = ctk.CTkButton(self.sidebar, text="üßπ Retention cleanup", command=self._open_retention)
        self.btn_orphan    = ctk.CTkButton(self.sidebar, text="üë§ Orphan users", command=self._open_orphan)
        self.btn_checkdb   = ctk.CTkButton(self.sidebar, text="ü©∫ DBCC CHECKDB", command=self._open_checkdb)

        for i, b in enumerate([self.btn_recovery, self.btn_perm, self.btn_retention, self.btn_orphan, self.btn_checkdb], start=1):
            b.grid(row=i, column=0, padx=12, pady=6, sticky="ew")

        # Content holder
        self.content = ctk.CTkFrame(self)
        self.content.grid(row=0, column=1, sticky="nsew")
        self.content.grid_rowconfigure(0, weight=1)
        self.content.grid_columnconfigure(0, weight=1)

        self._modules: Dict[str, ctk.CTkFrame] = {}

        # M·∫∑c ƒë·ªãnh m·ªü Recovery
        self._open_recovery()

    # ---------------- helpers ----------------

    def _get_conn(self):
        """
        L·∫•y k·∫øt n·ªëi hi·ªán t·∫°i t·ª´ owner.
        - Kh√¥ng ki·ªÉm tra ·ªü __init__ ƒë·ªÉ tr√°nh b√°o s·ªõm.
        - Ngay tr∆∞·ªõc khi thao t√°c s·∫Ω test SELECT 1.
        """
        conn = getattr(self.owner, "conn", None)
        if conn is None:
            raise RuntimeError("Ch∆∞a thi·∫øt l·∫≠p k·∫øt n·ªëi SQL Server (self.owner.conn=None).")
        if not _test_connection(conn):
            raise RuntimeError("K·∫øt n·ªëi SQL hi·ªán t·∫°i kh√¥ng h·ª£p l·ªá/ƒë√£ ƒë√≥ng. Vui l√≤ng k·∫øt n·ªëi l·∫°i.")
        return conn

    def _emit_event(self, ev: Dict[str, Any]):
        """
        (Tu·ª≥ ch·ªçn) Ph√°t s·ª± ki·ªán realtime ra trang ch·ªß/Trang Dashboard n·∫øu owner c√≥ h√†m emit_dashboard_event().
        N·∫øu kh√¥ng c√≥ th√¨ b·ªè qua.
        """
        try:
            if hasattr(self.owner, "emit_dashboard_event") and callable(self.owner.emit_dashboard_event):
                self.owner.emit_dashboard_event(ev)
        except Exception:
            pass

    def _show_module(self, key: str, factory):
        """Lazy-load subframe, hi·ªÉn th·ªã duy nh·∫•t 1 module."""
        for w in self.content.winfo_children():
            w.grid_forget()
        if key not in self._modules:
            self._modules[key] = factory()
        self._modules[key].grid(row=0, column=0, sticky="nsew")

    # ---------------- open module ----------------
    def _open_recovery(self):
        self._show_module("recovery", lambda: RecoveryModelFrame(self.content, self))
    def _open_perm(self):
        self._show_module("perm", lambda: FolderPermissionFrame(self.content, self))
    def _open_retention(self):
        self._show_module("retention", lambda: RetentionCleanupFrame(self.content, self))
    def _open_orphan(self):
        self._show_module("orphan", lambda: OrphanUsersFrame(self.content, self))
    def _open_checkdb(self):
        self._show_module("checkdb", lambda: CheckDBFrame(self.content, self))


# =====================================================================
# Module: Recovery Model
# =====================================================================

class RecoveryModelFrame(ctk.CTkFrame):
    """
    ƒê·ªïi Recovery Model h√†ng lo·∫°t (SIMPLE/FULL/BULK_LOGGED).
    - Li·ªát k√™ DB + tr·∫°ng th√°i + size + th·ªùi ƒëi·ªÉm backup g·∫ßn nh·∫•t.
    - Ch·ªçn nhi·ªÅu DB -> sinh Script ho·∫∑c Th·ª±c thi.
    - C·∫£nh b√°o khi chuy·ªÉn v·ªÅ SIMPLE (ph√° chain log).
    """

    def __init__(self, parent, admin: DatabaseAdminFrame):
        super().__init__(parent)
        self.admin = admin
        self._queue = queue.Queue()
        self._rows: List[Dict[str, Any]] = []

        self.grid_rowconfigure(2, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="Recovery Model", font=ctk.CTkFont(size=16, weight="bold")).grid(
            row=0, column=0, padx=12, pady=(12, 6), sticky="w"
        )

        tool = ctk.CTkFrame(self)
        tool.grid(row=1, column=0, padx=12, pady=(0, 6), sticky="ew")
        tool.grid_columnconfigure(5, weight=1)

        self.ent_search = ctk.CTkEntry(tool, width=220, placeholder_text="T√¨m DB‚Ä¶")
        self.ent_search.grid(row=0, column=0, padx=(8, 6), pady=6)
        ctk.CTkButton(tool, text="L·ªçc", command=self._apply_filter).grid(row=0, column=1, padx=4, pady=6)
        ctk.CTkButton(tool, text="‚Üª N·∫°p l·∫°i", command=self._reload).grid(row=0, column=2, padx=4, pady=6)

        self.cmb_model = ctk.CTkComboBox(tool, values=["SIMPLE", "FULL", "BULK_LOGGED"], width=160)
        self.cmb_model.set("SIMPLE")
        self.cmb_model.grid(row=0, column=3, padx=8, pady=6)

        ctk.CTkButton(tool, text="Sinh Script", command=lambda: self._apply(False)).grid(row=0, column=4, padx=4, pady=6)
        ctk.CTkButton(tool, text="Th·ª±c thi", fg_color="#22c55e", hover_color="#16a34a",
                      command=lambda: self._apply(True)).grid(row=0, column=5, padx=8, pady=6, sticky="e")

        # B·∫£ng
        self.tree = ttk.Treeview(self, columns=("name", "state", "recovery", "size_mb", "last_full", "last_diff", "last_log"),
                                 show="headings", selectmode="extended")
        for col, text, w, anchor in [
            ("name", "Database", 200, "w"),
            ("state", "Tr·∫°ng th√°i", 110, "center"),
            ("recovery", "Recovery", 120, "center"),
            ("size_mb", "Size (MB)", 90, "e"),
            ("last_full", "FULL", 140, "center"),
            ("last_diff", "DIFF", 140, "center"),
            ("last_log", "LOG", 140, "center"),
        ]:
            self.tree.heading(col, text=text)
            self.tree.column(col, width=w, anchor=anchor)
        self.tree.grid(row=2, column=0, padx=12, pady=(0, 8), sticky="nsew")
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=vsb.set)
        vsb.grid(row=2, column=1, sticky="ns", pady=(0, 8))

        # Log
        self.txt = ctk.CTkTextbox(self, height=140)
        self.txt.grid(row=3, column=0, padx=12, pady=(0, 12), sticky="nsew")

        self._reload()

    def _log(self, s: str):
        self.txt.configure(state="normal")
        self.txt.insert("end", s.rstrip() + "\n")
        self.txt.see("end")
        self.txt.configure(state="disabled")

    def _reload(self):
        self._log("ƒêang t·∫£i danh s√°ch DB ...")
        self.tree.delete(*self.tree.get_children())

        def worker():
            try:
                conn = self.admin._get_conn()
            except Exception as e:
                self._queue.put(("ERR", str(e))); return

            sql = r"""
;WITH size_cte AS (
  SELECT database_id, CAST(SUM(size)*8.0/1024 AS DECIMAL(18,1)) AS size_mb
  FROM sys.master_files GROUP BY database_id
),
last_full AS (
  SELECT database_name, MAX(backup_finish_date) AS last_full
  FROM msdb.dbo.backupset WHERE type = 'D' GROUP BY database_name
),
last_diff AS (
  SELECT database_name, MAX(backup_finish_date) AS last_diff
  FROM msdb.dbo.backupset WHERE type = 'I' GROUP BY database_name
),
last_log AS (
  SELECT database_name, MAX(backup_finish_date) AS last_log
  FROM msdb.dbo.backupset WHERE type = 'L' GROUP BY database_name
)
SELECT d.name, d.state_desc, d.recovery_model_desc, s.size_mb, f.last_full, i.last_diff, l.last_log
FROM sys.databases d
LEFT JOIN size_cte s ON s.database_id = d.database_id
LEFT JOIN last_full f ON f.database_name = d.name
LEFT JOIN last_diff i ON i.database_name = d.name
LEFT JOIN last_log l ON l.database_name = d.name
ORDER BY d.name;
"""
            ok, msg, rows = run_sql_safe(conn, sql)
            if not ok:
                self._queue.put(("ERR", msg)); return
            out = []
            for name, st, rec, size_mb, lf, ld, ll in rows or []:
                def fmt(x):
                    return x.strftime("%Y-%m-%d %H:%M:%S") if x else ""
                out.append({
                    "name": name, "state": st, "recovery": rec,
                    "size_mb": float(size_mb or 0.0),
                    "last_full": fmt(lf), "last_diff": fmt(ld), "last_log": fmt(ll)
                })
            self._queue.put(("DATA", out))

        threading.Thread(target=worker, daemon=True).start()
        self.after(100, self._poll_reload)

    def _poll_reload(self):
        try:
            tag, payload = self._queue.get_nowait()
        except queue.Empty:
            self.after(100, self._poll_reload); return
        if tag == "ERR":
            self._log(f"[L·ªñI] {payload}")
            return
        if tag == "DATA":
            self._rows = payload
            for r in self._rows:
                self.tree.insert("", "end", values=(r["name"], r["state"], r["recovery"],
                                                    f'{r["size_mb"]:,.1f}', r["last_full"], r["last_diff"], r["last_log"]))
            self._log(f"ƒê√£ t·∫£i {len(self._rows)} DB.")

    def _apply_filter(self):
        key = (self.ent_search.get() or "").strip().lower()
        self.tree.delete(*self.tree.get_children())
        for r in self._rows:
            if not key or key in r["name"].lower():
                self.tree.insert("", "end", values=(r["name"], r["state"], r["recovery"],
                                                    f'{r["size_mb"]:,.1f}', r["last_full"], r["last_diff"], r["last_log"]))

    def _selected_dbs(self) -> List[str]:
        names = []
        for iid in self.tree.selection():
            val = self.tree.set(iid, "name")
            if val:
                names.append(val)
        return names

    def _apply(self, do_change: bool):
        target = self.cmb_model.get().strip().upper()
        dbs = [d for d in self._selected_dbs() if d not in SYSTEM_DATABASES]
        if not dbs:
            messagebox.showinfo("Ch∆∞a ch·ªçn", "Ch·ªçn √≠t nh·∫•t 1 DB (kh√¥ng g·ªìm master/model/msdb/tempdb).")
            return
        if target == "SIMPLE":
            if not messagebox.askokcancel("C·∫£nh b√°o", "ƒê·ªïi v·ªÅ SIMPLE s·∫Ω ph√° chu·ªói LOG. Ti·∫øp t·ª•c?"):
                return

        scripts = [f"ALTER DATABASE [{d}] SET RECOVERY {target};" for d in dbs]
        self._log("===== SCRIPT =====")
        for s in scripts:
            self._log(s)
        self._log("==================")

        if not do_change:
            messagebox.showinfo("Script ƒë√£ sinh", "B·∫°n c√≥ th·ªÉ copy & ch·∫°y tr√™n SSMS.")
            return

        def worker():
            ok_all = True
            try:
                conn = self.admin._get_conn()
            except Exception as e:
                self._queue.put(("LOG", f"[L·ªñI] {e}")); self._queue.put(("DONE", False)); return
            for s in scripts:
                ok, msg, _ = run_sql_safe(conn, s)
                if ok:
                    self._queue.put(("LOG", f"[OK] {s}"))
                else:
                    ok_all = False
                    self._queue.put(("LOG", f"[L·ªñI] {s}\n    ‚Üí {msg}"))
            self._queue.put(("DONE", ok_all))

        threading.Thread(target=worker, daemon=True).start()
        self.after(100, self._poll_apply)

    def _poll_apply(self):
        try:
            tag, payload = self._queue.get_nowait()
        except queue.Empty:
            self.after(100, self._poll_apply); return
        if tag == "LOG":
            self._log(payload); self.after(50, self._poll_apply)
        elif tag == "DONE":
            self._log("Ho√†n t·∫•t.")
            # G·ª≠i event realtime (n·∫øu trang ch·ªß c√≥ ƒëƒÉng k√Ω)
            self.admin._emit_event({
                "ts": dt.datetime.now().isoformat(timespec="seconds"),
                "db": "(multiple)", "type": f"RECOVERY‚Üí{self.cmb_model.get()}",
                "status": "OK" if payload else "FAIL", "note": ""
            })
            if payload:
                messagebox.showinfo("OK", "ƒê√£ ƒë·ªïi Recovery Model.")


# =====================================================================
# Module: Ki·ªÉm tra th∆∞ m·ª•c backup (backup 'model')
# =====================================================================

class FolderPermissionFrame(ctk.CTkFrame):
    """
    Ki·ªÉm tra quy·ªÅn ghi th∆∞ m·ª•c backup b·∫±ng c√°ch BACKUP DATABASE [model] (nh·∫π).
    - Kh√¥ng ƒë·ª•ng DB l·ªõn.
    - C√≥ log chi ti·∫øt; th·ª≠ xp_dirtree; xo√° file test n·∫øu xp_cmdshell b·∫≠t.
    """

    def __init__(self, parent, admin: DatabaseAdminFrame):
        super().__init__(parent)
        self.admin = admin

        self.grid_rowconfigure(2, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="Ki·ªÉm tra th∆∞ m·ª•c backup (backup 'model')",
                     font=ctk.CTkFont(size=16, weight="bold")).grid(row=0, column=0, padx=12, pady=(12, 6), sticky="w")

        form = ctk.CTkFrame(self)
        form.grid(row=1, column=0, padx=12, pady=(0, 6), sticky="ew")
        form.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(form, text="Th∆∞ m·ª•c ƒë√≠ch:").grid(row=0, column=0, padx=(8, 6), pady=6, sticky="e")
        self.ent_dir = ctk.CTkEntry(form, placeholder_text=r"VD: E:\SQL_Backup\ ho·∫∑c \\server\share\path\\", width=520)
        self.ent_dir.grid(row=0, column=1, padx=(0, 6), pady=6, sticky="ew")
        ctk.CTkButton(form, text="Ch·ªçn‚Ä¶", command=self._browse).grid(row=0, column=2, padx=6, pady=6)
        ctk.CTkButton(form, text="Ki·ªÉm tra", fg_color="#22c55e", hover_color="#16a34a", command=self._run).grid(row=0, column=3, padx=(6, 8), pady=6)

        self.txt = ctk.CTkTextbox(self, height=220)
        self.txt.grid(row=2, column=0, padx=12, pady=(0, 12), sticky="nsew")

    def _browse(self):
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c backup")
        if path:
            if not path.endswith("\\"):
                path += "\\"
            self.ent_dir.delete(0, "end"); self.ent_dir.insert(0, path)

    def _log(self, s: str):
        self.txt.configure(state="normal")
        self.txt.insert("end", s.rstrip() + "\n")
        self.txt.see("end")
        self.txt.configure(state="disabled")

    def _run(self):
        base = (self.ent_dir.get() or "").strip()
        if not base:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Nh·∫≠p th∆∞ m·ª•c backup.")
            return
        if not (base.endswith("\\") or base.endswith("/")):
            base += "\\"
            self.ent_dir.delete(0, "end"); self.ent_dir.insert(0, base)

        self.txt.configure(state="normal"); self.txt.delete("1.0", "end"); self.txt.configure(state="disabled")
        self._log("=== KI·ªÇM TRA QUY·ªÄN GHI B·∫∞NG DB 'model' ===")

        def worker():
            try:
                conn = self.admin._get_conn()
            except Exception as e:
                self._log(f"[L·ªñI] {e}"); return

            prev = getattr(conn, "autocommit", False)
            cur = None
            try:
                conn.autocommit = True
                cur = conn.cursor()

                # 1) Th·ª≠ xp_dirtree (n·∫øu t·∫Øt th√¨ ch·ªâ c·∫£nh b√°o, kh√¥ng fail)
                try:
                    cur.execute("EXEC master..xp_dirtree ?, 1, 1;", (base,))
                    self._log(f"[OK] xp_dirtree th·∫•y th∆∞ m·ª•c: {base}")
                except Exception as e:
                    self._log(f"[CH√ö √ù] xp_dirtree l·ªói (b·ªè qua): {e}")

                # 2) T·∫°o file backup test
                test_name = f"MODEL_PERM_{os.getpid()}_{int(time.time())}.bak"
                test_path = base + test_name
                self._log(f"‚Üí Sinh file test: {test_path}")

                # 3) BACKUP DATABASE [model] (nh·∫π + COPY_ONLY + COMPRESSION)
                try:
                    cur.execute("""
                        BACKUP DATABASE [model]
                        TO DISK = ?
                        WITH COPY_ONLY, COMPRESSION, INIT, SKIP, CHECKSUM, STATS = 1;
                    """, (test_path,))
                    self._log("[OK] Ghi file test th√†nh c√¥ng.")
                    # (Tu·ª≥ ch·ªçn) ph√°t s·ª± ki·ªán realtime cho Dashboard
                    self.admin._emit_event({
                        "ts": dt.datetime.now().isoformat(timespec="seconds"),
                        "db": "(model)", "type": "TEST-WRITE", "status": "OK", "note": test_name
                    })
                except Exception as e:
                    self._log(f"[TH·∫§T B·∫†I] BACKUP model: {e}")
                    self.admin._emit_event({
                        "ts": dt.datetime.now().isoformat(timespec="seconds"),
                        "db": "(model)", "type": "TEST-WRITE", "status": "FAIL", "note": str(e)
                    })
                    return

                # 4) Xo√° file test n·∫øu xp_cmdshell b·∫≠t (kh√¥ng b·∫Øt bu·ªôc)
                try:
                    del_cmd = f'del "{test_path.replace("\"", "\"\"")}"'
                    cur.execute("EXEC master..xp_cmdshell ?", (del_cmd,))
                    self._log("[OK] ƒê√£ xo√° file test b·∫±ng xp_cmdshell.")
                except Exception:
                    self._log("[CH√ö √ù] xp_cmdshell t·∫Øt/kh√¥ng xo√° ƒë∆∞·ª£c ‚Äî b·∫°n c√≥ th·ªÉ xo√° tay file test n·∫øu mu·ªën.")

                self._log("[K·∫æT LU·∫¨N] SQL Server C√ì th·ªÉ ghi v√†o th∆∞ m·ª•c.")
            except Exception as e:
                self._log(f"[L·ªñI] {e}")
            finally:
                try:
                    if cur: cur.close()
                except Exception: pass
                try:
                    conn.autocommit = prev
                except Exception: pass

        threading.Thread(target=worker, daemon=True).start()


# =====================================================================
# Module: Retention cleanup
# =====================================================================

class RetentionCleanupFrame(ctk.CTkFrame):
    """
    X√≥a file backup qu√° h·∫°n theo s·ªë ng√†y gi·ªØ l·∫°i.
    - C√≥ Dry-Run: li·ªát k√™ file s·∫Ω x√≥a, KH√îNG x√≥a th·∫≠t.
    - Pattern ƒëu√¥i file: .bak, .dif, .trn (m·∫∑c ƒë·ªãnh, c√≥ th·ªÉ ch·ªânh).
    """

    def __init__(self, parent, admin: DatabaseAdminFrame):
        super().__init__(parent)
        self.admin = admin

        self.grid_rowconfigure(2, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="Retention cleanup", font=ctk.CTkFont(size=16, weight="bold")).grid(
            row=0, column=0, padx=12, pady=(12, 6), sticky="w"
        )

        form = ctk.CTkFrame(self)
        form.grid(row=1, column=0, padx=12, pady=(0, 6), sticky="ew")
        form.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(form, text="Th∆∞ m·ª•c g·ªëc:").grid(row=0, column=0, padx=(8, 6), pady=6, sticky="e")
        self.ent_base = ctk.CTkEntry(form, placeholder_text=r"VD: E:\SQL_Backup\ ho·∫∑c \\server\share\path\\", width=520)
        self.ent_base.grid(row=0, column=1, padx=(0, 6), pady=6, sticky="ew")
        ctk.CTkButton(form, text="Ch·ªçn‚Ä¶", command=self._browse).grid(row=0, column=2, padx=6, pady=6)

        ctk.CTkLabel(form, text="Ng√†y gi·ªØ l·∫°i:").grid(row=0, column=3, padx=(12, 6), pady=6, sticky="e")
        self.ent_days = ctk.CTkEntry(form, width=80)
        self.ent_days.insert(0, "14")
        self.ent_days.grid(row=0, column=4, padx=(0, 6), pady=6)

        ctk.CTkLabel(form, text="Pattern:").grid(row=0, column=5, padx=(12, 6), pady=6, sticky="e")
        self.ent_patterns = ctk.CTkEntry(form, width=160)
        self.ent_patterns.insert(0, ".bak,.dif,.trn")
        self.ent_patterns.grid(row=0, column=6, padx=(0, 6), pady=6)

        self.chk_dry = ctk.CTkCheckBox(form, text="Dry-Run (kh√¥ng x√≥a th·∫≠t)")
        self.chk_dry.grid(row=0, column=7, padx=(12, 8), pady=6)
        self.chk_dry.select()

        ctk.CTkButton(form, text="Th·ª±c thi", fg_color="#f59e0b", hover_color="#b45309",
                      command=self._run).grid(row=0, column=8, padx=(8, 8), pady=6)

        self.txt = ctk.CTkTextbox(self, height=240)
        self.txt.grid(row=2, column=0, padx=12, pady=(0, 12), sticky="nsew")

    def _browse(self):
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c g·ªëc")
        if path:
            if not path.endswith("\\"):
                path += "\\"
            self.ent_base.delete(0, "end"); self.ent_base.insert(0, path)

    def _log(self, s: str):
        self.txt.configure(state="normal")
        self.txt.insert("end", s.rstrip() + "\n")
        self.txt.see("end")
        self.txt.configure(state="disabled")

    def _run(self):
        import fnmatch
        base = (self.ent_base.get() or "").strip()
        if not base:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch·ªçn th∆∞ m·ª•c g·ªëc.")
            return
        try:
            days = int((self.ent_days.get() or "0").strip())
            if days < 0:
                raise ValueError
        except Exception:
            messagebox.showwarning("Sai d·ªØ li·ªáu", "S·ªë ng√†y gi·ªØ l·∫°i ph·∫£i l√† s·ªë nguy√™n ‚â• 0.")
            return
        pats = [p.strip().lower() for p in self.ent_patterns.get().split(",") if p.strip()]
        dry = bool(self.chk_dry.get())

        self.txt.configure(state="normal"); self.txt.delete("1.0", "end"); self.txt.configure(state="disabled")
        self._log(f"=== RETENTION: base={base}, keep_days={days}, patterns={pats}, dry_run={dry} ===")

        def worker():
            now = time.time()
            cutoff = now - days * 86400
            cand: List[str] = []
            deleted = 0

            for root, _, files in os.walk(base):
                for f in files:
                    fn = f.lower()
                    if not any(fn.endswith(p) for p in pats):
                        continue
                    path = os.path.join(root, f)
                    try:
                        st = os.stat(path)
                        if st.st_mtime < cutoff:
                            cand.append(path)
                    except Exception as e:
                        self._log(f"[C·∫¢NH B√ÅO] Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c: {path} ‚Üí {e}")

            if dry:
                self._log("‚Ä¢ DRY-RUN: S·∫Ω x√≥a c√°c file sau:")
                for p in cand:
                    self._log("  - " + p)
                self._log(f"T·ªïng {len(cand)} file.")
                return

            for p in cand:
                try:
                    os.remove(p)
                    deleted += 1
                    self._log("[OK] X√≥a: " + p)
                except Exception as e:
                    self._log(f"[L·ªñI] Kh√¥ng x√≥a ƒë∆∞·ª£c {p} ‚Üí {e}")

            self._log(f"Ho√†n t·∫•t. ƒê√£ x√≥a {deleted}/{len(cand)} file.")
            # (Tu·ª≥ ch·ªçn) ph√°t s·ª± ki·ªán nh·∫π cho Dashboard
            self.admin._emit_event({
                "ts": dt.datetime.now().isoformat(timespec="seconds"),
                "db": "(retention)", "type": "CLEANUP", "status": "OK", "note": f"deleted={deleted}"
            })

        threading.Thread(target=worker, daemon=True).start()


# =====================================================================
# Module: Orphan Users
# =====================================================================

class OrphanUsersFrame(ctk.CTkFrame):
    """
    D√≤ user m·ªì c√¥i (db user kh√¥ng map ƒë∆∞·ª£c login).
    - Li·ªát k√™ theo DB user.
    - Sinh script g·ª£i √Ω ALTER USER ... WITH LOGIN ... (kh√¥ng t·ª± th·ª±c thi).
    """

    def __init__(self, parent, admin: DatabaseAdminFrame):
        super().__init__(parent)
        self.admin = admin
        self._rows: List[Tuple[str, str]] = []  # (db, user)

        self.grid_rowconfigure(2, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="Orphan Users", font=ctk.CTkFont(size=16, weight="bold")).grid(
            row=0, column=0, padx=12, pady=(12, 6), sticky="w"
        )

        tool = ctk.CTkFrame(self)
        tool.grid(row=1, column=0, padx=12, pady=(0, 6), sticky="ew")
        ctk.CTkButton(tool, text="‚Üª Qu√©t orphan users", command=self._scan).grid(row=0, column=0, padx=6, pady=6)
        ctk.CTkButton(tool, text="Sinh Script g·ª£i √Ω", command=self._gen_script).grid(row=0, column=1, padx=6, pady=6)

        self.tree = ttk.Treeview(self, columns=("db", "user"), show="headings", selectmode="extended")
        self.tree.heading("db", text="Database"); self.tree.column("db", width=200, anchor="w")
        self.tree.heading("user", text="DB User"); self.tree.column("user", width=240, anchor="w")
        self.tree.grid(row=2, column=0, padx=12, pady=(0, 8), sticky="nsew")
        vsb = ttk.Scrollbar(self, orient="vertical", command=self.tree.yview)
        self.tree.configure(yscrollcommand=vsb.set); vsb.grid(row=2, column=1, sticky="ns", pady=(0, 8))

        self.txt = ctk.CTkTextbox(self, height=200)
        self.txt.grid(row=3, column=0, padx=12, pady=(0, 12), sticky="nsew")

    def _log(self, s: str):
        self.txt.configure(state="normal"); self.txt.insert("end", s.rstrip() + "\n"); self.txt.see("end"); self.txt.configure(state="disabled")

    def _scan(self):
        # Xo√° k·∫øt qu·∫£ c≈©
        self.tree.delete(*self.tree.get_children()); self.txt.configure(state="normal"); self.txt.delete("1.0", "end"); self.txt.configure(state="disabled")
        self._rows.clear()
        self._log("ƒêang qu√©t orphan users tr√™n t·∫•t c·∫£ DB user ...")

        def worker():
            try:
                conn = self.admin._get_conn()
            except Exception as e:
                self._log(f"[L·ªñI] {e}"); return

            ok, msg, rows = run_sql_safe(conn, "SELECT name FROM sys.databases WHERE database_id > 4 ORDER BY name;")
            if not ok:
                self._log(f"[L·ªñI] {msg}"); return
            dbs = [r[0] for r in (rows or [])]

            query = r"""
SELECT dp.name AS db_user
FROM sys.database_principals dp
LEFT JOIN sys.server_principals sp ON dp.sid = sp.sid
WHERE dp.type IN ('S','U') AND dp.principal_id > 4 AND sp.sid IS NULL
ORDER BY dp.name;
"""
            for db in dbs:
                try:
                    ok, msg, rows = run_sql_safe(conn, f"USE [{db}]; {query}")
                    if not ok:
                        self._log(f"[L·ªñI] {db}: {msg}"); continue
                    for (u,) in rows or []:
                        self._rows.append((db, u))
                        self.tree.insert("", "end", values=(db, u))
                except Exception as e:
                    self._log(f"[L·ªñI] {db}: {e}")

            self._log(f"Ho√†n t·∫•t. T√¨m th·∫•y {len(self._rows)} orphan user.")
            # (tu·ª≥ ch·ªçn) ph√°t event
            self.admin._emit_event({
                "ts": dt.datetime.now().isoformat(timespec="seconds"),
                "db": "(orphan-scan)", "type": "SCAN", "status": "OK", "note": f"found={len(self._rows)}"
            })

        threading.Thread(target=worker, daemon=True).start()

    def _gen_script(self):
        if not self._rows:
            messagebox.showinfo("Tr·ªëng", "Ch∆∞a c√≥ orphan ƒë·ªÉ sinh script.")
            return
        self._log("===== G·ª¢I √ù SCRIPT =====")
        self._log("-- Thay [server_login] th√†nh login ph√π h·ª£p r·ªìi ch·∫°y tr√™n SSMS")
        for db, u in self._rows:
            self._log(f"USE [{db}]; ALTER USER [{u}] WITH LOGIN = [server_login];")
        self._log("========================")
        self.admin._emit_event({
            "ts": dt.datetime.now().isoformat(timespec="seconds"),
            "db": "(orphan)", "type": "SCRIPT", "status": "OK", "note": f"{len(self._rows)} users"
        })


# =====================================================================
# Module: DBCC CHECKDB
# =====================================================================

class CheckDBFrame(ctk.CTkFrame):
    """
    DBCC CHECKDB: ch·ªçn DB + ch·∫ø ƒë·ªô QUICK (PHYSICAL_ONLY) ho·∫∑c FULL.
    - Ch·∫°y n·ªÅn, log t√≥m t·∫Øt; kh√¥ng kho√° UI.
    """

    def __init__(self, parent, admin: DatabaseAdminFrame):
        super().__init__(parent)
        self.admin = admin

        self.grid_rowconfigure(3, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="DBCC CHECKDB", font=ctk.CTkFont(size=16, weight="bold")).grid(
            row=0, column=0, padx=12, pady=(12, 6), sticky="w"
        )

        form = ctk.CTkFrame(self)
        form.grid(row=1, column=0, padx=12, pady=(0, 6), sticky="ew")

        ctk.CTkLabel(form, text="Database:").grid(row=0, column=0, padx=(8, 6), pady=6, sticky="e")
        self.cmb_db = ctk.CTkComboBox(form, values=[], width=220)
        self.cmb_db.grid(row=0, column=1, padx=(0, 12), pady=6)

        ctk.CTkLabel(form, text="Ch·∫ø ƒë·ªô:").grid(row=0, column=2, padx=(8, 6), pady=6, sticky="e")
        self.cmb_mode = ctk.CTkComboBox(form, values=["QUICK (PHYSICAL_ONLY)", "FULL"], width=220)
        self.cmb_mode.set("QUICK (PHYSICAL_ONLY)")
        self.cmb_mode.grid(row=0, column=3, padx=(0, 12), pady=6)

        ctk.CTkButton(form, text="‚Üª N·∫°p DB", command=self._load_dbs).grid(row=0, column=4, padx=6, pady=6)
        ctk.CTkButton(form, text="Th·ª±c thi", fg_color="#22c55e", hover_color="#16a34a", command=self._run).grid(row=0, column=5, padx=6, pady=6)

        self.txt = ctk.CTkTextbox(self, height=260)
        self.txt.grid(row=3, column=0, padx=12, pady=(0, 12), sticky="nsew")

        self._load_dbs()

    def _log(self, s: str):
        self.txt.configure(state="normal")
        self.txt.insert("end", s.rstrip() + "\n")
        self.txt.see("end")
        self.txt.configure(state="disabled")

    def _load_dbs(self):
        # Ch·ªâ ki·ªÉm tra k·∫øt n·ªëi t·∫°i th·ªùi ƒëi·ªÉm ng∆∞·ªùi d√πng b·∫•m "‚Üª N·∫°p DB" ho·∫∑c init
        try:
            conn = self.admin._get_conn()
        except Exception as e:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", str(e))
            return
        ok, msg, rows = run_sql_safe(conn, "SELECT name FROM sys.databases WHERE database_id > 4 ORDER BY name;")
        if not ok:
            messagebox.showerror("L·ªói", msg); return
        vals = [r[0] for r in (rows or [])] or [""]
        self.cmb_db.configure(values=vals); self.cmb_db.set(vals[0])

    def _run(self):
        # Ki·ªÉm tra k·∫øt n·ªëi ngay tr∆∞·ªõc khi th·ª±c thi
        try:
            conn = self.admin._get_conn()
        except Exception as e:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", str(e)); return

        db = self.cmb_db.get().strip()
        if not db:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch·ªçn database.")
            return
        is_quick = "quick" in self.cmb_mode.get().lower()

        self.txt.configure(state="normal"); self.txt.delete("1.0", "end"); self.txt.configure(state="disabled")
        self._log(f"=== DBCC CHECKDB ON [{db}] mode={'PHYSICAL_ONLY' if is_quick else 'FULL'} ===")

        def worker():
            sql = f"DBCC CHECKDB (N'{db}') WITH NO_INFOMSGS"
            if is_quick:
                sql += ", PHYSICAL_ONLY"
            sql += ";"
            ok, msg, _ = run_sql_safe(conn, sql)
            if ok:
                self._log("[OK] DBCC CHECKDB ho√†n t·∫•t (NO_INFOMSGS).")
                self.admin._emit_event({
                    "ts": dt.datetime.now().isoformat(timespec="seconds"),
                    "db": db, "type": "CHECKDB", "status": "OK", "note": "NO_INFOMSGS"
                })
            else:
                self._log(f"[L·ªñI] {msg}")
                self.admin._emit_event({
                    "ts": dt.datetime.now().isoformat(timespec="seconds"),
                    "db": db, "type": "CHECKDB", "status": "FAIL", "note": msg
                })

        threading.Thread(target=worker, daemon=True).start()
