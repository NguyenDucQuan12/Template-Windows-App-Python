# -*- coding: utf-8 -*-
"""
K·ªãch b·∫£n Backup (g·ªôp Storage + Schedule + Manual)
- Ph·ª• thu·ªôc DatabasePage (owner_page): c·∫ßn self.conn, self.selected_databases, self.config, self.save_config()
- L∆∞u c·∫•u h√¨nh THEO T·ª™NG CSDL trong app_config.json:
    config["per_db"][<db_name>] = {
        "backup_dir": "D:/SQL_Backup/",
        "schedule": {
            "full": "0 0 * * 0",
            "diff": "30 0 * * 1-6",
            "log":  "*/15 * * * *"
        }
    }
- Khi ch·ªçn DB t·ª´ combobox -> t·ª± n·∫°p l·∫°i c·∫•u h√¨nh, hi·ªÉn th·ªã v√†o UI
"""

import os
import re
import threading
import customtkinter as ctk
from tkinter import ttk, messagebox, filedialog
from typing import Dict, Any, Optional

_CRON_RE = re.compile(r"^\s*([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s*$")

class ScheduleFrame(ctk.CTkFrame):
    """
    Frame "K·ªãch b·∫£n Backup":
    1) Ch·ªçn CSDL
    2) Ch·ªçn th∆∞ m·ª•c l∆∞u tr·ªØ + n√∫t ki·ªÉm tra quy·ªÅn ghi t·ª´ SQL Server
    3) C√†i ƒë·∫∑t l·ªãch Full/Diff/Log (CRON 5 tr∆∞·ªùng)
    4) Backup th·ªß c√¥ng cho CSDL ƒë√£ ch·ªçn
    5) L∆∞u c·∫•u h√¨nh theo t·ª´ng CSDL v√†o app_config.json
    """

    def __init__(self, parent, owner_page):
        """
        parent: frame cha (content area)
        owner_page: DatabasePage (chia s·∫ª state)
        """
        super().__init__(parent)
        self.owner = owner_page

        # --- State t·∫°m cho UI ---
        self.current_db: Optional[str] = None    # CSDL ƒëang ch·ªçn trong combobox

        # ƒê·∫£m b·∫£o nh√°nh per_db t·ªìn t·∫°i trong config
        self.owner.config.setdefault("per_db", {})  # ki·ªÉu: { db_name: {...} }

        # B·ªë c·ª•c 1 c·ªôt: ti√™u ƒë·ªÅ -> kh·ªëi ch·ªçn DB -> kh·ªëi l∆∞u tr·ªØ -> kh·ªëi l·ªãch -> kh·ªëi backup tay
        self.grid_rowconfigure(6, weight=1)
        self.grid_columnconfigure(0, weight=1)

        # ---------------- Ti√™u ƒë·ªÅ ----------------
        ctk.CTkLabel(self, text="K·ªãch b·∫£n Backup", font=ctk.CTkFont(size=18, weight="bold"))\
            .grid(row=0, column=0, padx=16, pady=(16, 8), sticky="w")

        # ---------------- Ch·ªçn CSDL ----------------
        self._build_db_selector(row=1)

        # ---------------- Khu l∆∞u tr·ªØ ----------------
        self._build_storage(row=2)

        # ---------------- Khu l·ªãch backup ----------------
        self._build_schedule(row=3)

        # ---------------- Khu backup th·ªß c√¥ng ----------------
        self._build_manual_backup(row=4)

        # D√≤ng d∆∞·ªõi c√πng: ghi ch√∫/tr·∫°ng th√°i
        self.status_box = ctk.CTkTextbox(self, height=100)
        self.status_box.grid(row=5, column=0, padx=16, pady=(6, 16), sticky="nsew")
        self._log("‚Ä¢ Ch·ªçn CSDL, c·∫•u h√¨nh th∆∞ m·ª•c l∆∞u tr·ªØ, l·ªãch backup, ho·∫∑c ch·∫°y backup th·ªß c√¥ng.")

        # Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu (ch·ªçn DB ƒë·∫ßu ti√™n n·∫øu c√≥)
        self._init_db_selection()

    # ======================================================================
    # UI builders
    # ======================================================================

    def _build_db_selector(self, row: int):
        """Kh·ªëi ch·ªçn DB b·∫±ng combobox."""
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(wrap, text="Ch·ªçn CSDL:").grid(row=0, column=0, padx=(12, 8), pady=8, sticky="e")
        self.cbo_db = ctk.CTkComboBox(wrap, values=sorted(self.owner.selected_databases), width=260,
                                      command=lambda _: self._on_change_db())
        self.cbo_db.grid(row=0, column=1, padx=8, pady=8, sticky="w")

        # N√∫t c·∫≠p nh·∫≠t danh s√°ch DB khi v·ª´a th√™m/x√≥a ·ªü trang kh√°c
        ctk.CTkButton(wrap, text="‚Üª N·∫°p danh s√°ch", command=self._reload_db_list).grid(
            row=0, column=2, padx=8, pady=8, sticky="w"
        )

    def _build_storage(self, row: int):
        """Kh·ªëi c·∫•u h√¨nh th∆∞ m·ª•c l∆∞u tr·ªØ + ki·ªÉm tra quy·ªÅn ghi."""
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(wrap, text="Th∆∞ m·ª•c l∆∞u tr·ªØ (tr√™n SQL Server):").grid(row=0, column=0, padx=(12, 8), pady=8, sticky="e")
        self.ent_dir = ctk.CTkEntry(wrap, width=460, placeholder_text=r"VD: D:\SQL_Backup\ ho·∫∑c \\fileserver\share\sqlbackup")
        self.ent_dir.grid(row=0, column=1, padx=8, pady=8, sticky="w")

        # Ch·ªçn th∆∞ m·ª•c c·ª•c b·ªô (ƒë·ªÉ ti·ªán copy ƒë∆∞·ªùng d·∫´n) ‚Äî l∆∞u √Ω: SQL Server service c·∫ßn th·∫•y ƒë∆∞·ªùng d·∫´n n√†y
        ctk.CTkButton(wrap, text="Ch·ªçn (c·ª•c b·ªô)", command=self._choose_local_dir).grid(row=0, column=2, padx=8, pady=8, sticky="w")

        # Ki·ªÉm tra quy·ªÅn ghi
        ctk.CTkButton(wrap, text="Ki·ªÉm tra quy·ªÅn ghi t·ª´ SQL Server", command=self._test_write_perm).grid(
            row=1, column=1, padx=8, pady=(0, 8), sticky="w"
        )

        # L∆∞u khi r·ªùi focus
        self.ent_dir.bind("<FocusOut>", lambda _: self._persist_for_current_db())

    def _build_schedule(self, row: int):
        """Kh·ªëi c·∫•u h√¨nh l·ªãch backup (CRON)."""
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(wrap, text="L·ªãch FULL (CRON):").grid(row=0, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_full = ctk.CTkEntry(wrap, width=320)
        self.ent_full.grid(row=0, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="L·ªãch DIFF (CRON):").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_diff = ctk.CTkEntry(wrap, width=320)
        self.ent_diff.grid(row=1, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="L·ªãch LOG (CRON):").grid(row=2, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_log = ctk.CTkEntry(wrap, width=320)
        self.ent_log.grid(row=2, column=1, padx=8, pady=6, sticky="w")

        # N√∫t l∆∞u ri√™ng (c≈©ng l∆∞u khi ƒë·ªïi DB)
        ctk.CTkButton(wrap, text="üíæ L∆∞u l·ªãch", command=self._save_schedule).grid(
            row=3, column=1, padx=8, pady=(6, 8), sticky="w"
        )

    def _build_manual_backup(self, row: int):
        """Kh·ªëi backup th·ªß c√¥ng cho DB ƒëang ch·ªçn."""
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")

        ctk.CTkLabel(wrap, text="Backup th·ªß c√¥ng cho CSDL ƒë√£ ch·ªçn:", font=ctk.CTkFont(weight="bold")).grid(
            row=0, column=0, padx=12, pady=(10, 6), sticky="w"
        )

        ctk.CTkLabel(wrap, text="Ki·ªÉu:").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.cbo_type = ctk.CTkComboBox(wrap, values=["FULL", "DIFF", "LOG"], width=120)
        self.cbo_type.grid(row=1, column=1, padx=8, pady=6, sticky="w")
        self.cbo_type.set("FULL")

        ctk.CTkButton(wrap, text="Ch·∫°y backup", command=self._run_manual_backup).grid(
            row=1, column=2, padx=8, pady=6, sticky="w"
        )

    # ======================================================================
    # DB selection & persistence
    # ======================================================================

    def _init_db_selection(self):
        """Ch·ªçn DB ƒë·∫ßu ti√™n n·∫øu c√≥; n·∫°p c·∫•u h√¨nh c·ªßa DB v√†o form."""
        dbs = sorted(self.owner.selected_databases)
        if not dbs:
            self._log("‚Ä¢ Ch∆∞a c√≥ DB trong danh s√°ch backup. V√†o tab 'Database' ƒë·ªÉ th√™m.")
            return
        # N·∫øu combobox ch∆∞a set, set DB ƒë·∫ßu ti√™n
        if not self.cbo_db.get():
            self.cbo_db.set(dbs[0])
        self._on_change_db()

    def _reload_db_list(self):
        """N√∫t '‚Üª N·∫°p danh s√°ch': c·∫≠p nh·∫≠t combobox theo selected_databases."""
        values = sorted(self.owner.selected_databases)
        self.cbo_db.configure(values=values)
        if values:
            if self.cbo_db.get() not in values:
                self.cbo_db.set(values[0])
            self._on_change_db()
        else:
            self.cbo_db.set("")
            self.current_db = None
            self._clear_form()

    def _on_change_db(self):
        """Khi ƒë·ªïi DB trong combobox -> load c·∫•u h√¨nh t·ª´ per_db v√† hi·ªÉn th·ªã."""
        self.current_db = self.cbo_db.get().strip() or None
        if not self.current_db:
            self._clear_form()
            return

        # ƒê·∫£m b·∫£o c√≥ khung c·∫•u h√¨nh cho DB n√†y
        per_db = self.owner.config.setdefault("per_db", {})
        db_cfg: Dict[str, Any] = per_db.setdefault(self.current_db, {})
        db_cfg.setdefault("backup_dir", None)
        db_cfg.setdefault("schedule", {"full": "0 0 * * 0", "diff": "30 0 * * 1-6", "log": "*/15 * * * *"})

        # Hi·ªÉn th·ªã
        self.ent_dir.delete(0, "end")
        if db_cfg.get("backup_dir"):
            self.ent_dir.insert(0, db_cfg["backup_dir"])

        sch = db_cfg.get("schedule", {})
        self.ent_full.delete(0, "end"); self.ent_full.insert(0, sch.get("full", "0 0 * * 0"))
        self.ent_diff.delete(0, "end"); self.ent_diff.insert(0, sch.get("diff", "30 0 * * 1-6"))
        self.ent_log.delete(0, "end");  self.ent_log.insert(0, sch.get("log",  "*/15 * * * *"))

    def _clear_form(self):
        """Xo√° n·ªôi dung form khi kh√¥ng c√≥ DB."""
        self.ent_dir.delete(0, "end")
        self.ent_full.delete(0, "end")
        self.ent_diff.delete(0, "end")
        self.ent_log.delete(0, "end")

    def _persist_for_current_db(self):
        """Ghi l·∫°i 'backup_dir' cho DB hi·ªán t·∫°i khi r·ªùi focus."""
        if not self.current_db:
            return
        path = self.ent_dir.get().strip() or None
        self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {}).update({"backup_dir": path})
        self.owner.save_config(silent=True)  # ghi kh√¥ng popup
        self._log(f"‚Ä¢ ƒê√£ l∆∞u th∆∞ m·ª•c l∆∞u tr·ªØ cho [{self.current_db}].")

    # ======================================================================
    # Storage actions
    # ======================================================================

    def _choose_local_dir(self):
        """Ch·ªçn th∆∞ m·ª•c c·ª•c b·ªô (ƒë·ªÉ ti·ªán copy d√°n). L∆∞u √Ω: SQL Server ph·∫£i nh√¨n th·∫•y ƒë∆∞·ªùng d·∫´n n√†y."""
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c (c·ª•c b·ªô)")
        if path:
            if not path.endswith(os.sep):
                path += os.sep
            self.ent_dir.delete(0, "end")
            self.ent_dir.insert(0, path)
            self._persist_for_current_db()

    def _test_write_perm(self):
        """Ki·ªÉm tra SQL Server c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c kh√¥ng (DB ƒëang ch·ªçn)."""
        if not self.owner.conn:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", "V√†o tab 'K·∫øt n·ªëi' ƒë·ªÉ k·∫øt n·ªëi SQL Server tr∆∞·ªõc.")
            return
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "H√£y ch·ªçn CSDL tr∆∞·ªõc khi ki·ªÉm tra.")
            return
        target = self.ent_dir.get().strip()
        if not target:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Nh·∫≠p th∆∞ m·ª•c ƒë√≠ch tr√™n SQL Server.")
            return

        self._clear_status()

        def _work():
            try:
                cur = self.owner.conn.cursor()
                # B1: xp_dirtree
                can_xp = True
                try:
                    cur.execute("EXEC master..xp_dirtree ?,1,1", (target,))
                    self._log(f"[OK] xp_dirtree th·∫•y th∆∞ m·ª•c: {target}")
                except Exception as e:
                    can_xp = False
                    self._log(f"[C·∫¢NH B√ÅO] xp_dirtree l·ªói: {e}")

                # B2: xp_cmdshell th·ª≠ t·∫°o file
                if can_xp:
                    test_file = os.path.join(target, "perm_test.txt")
                    try:
                        cur.execute("EXEC master..xp_cmdshell 'echo OK> " + test_file.replace('\"', '\"\"') + "'")
                        self._log(f"[OK] T·∫°o file test: {test_file}")
                        cur.execute("EXEC master..xp_cmdshell 'del " + test_file.replace('\"', '\"\"') + "'")
                        self._log("[OK] Xo√° file test.")
                        self._log("[K·∫æT LU·∫¨N] SQL Server C√ì quy·ªÅn ghi.")
                        return
                    except Exception as e:
                        self._log(f"[C·∫¢NH B√ÅO] xp_cmdshell t·∫°o file th·∫•t b·∫°i: {e}")

                # B3: Fallback b·∫±ng BACKUP COPY_ONLY database hi·ªán t·∫°i v√†o file nh·ªè
                bak = os.path.join(target, f"{self.current_db}_PERM_TEST_COPYONLY.bak")
                try:
                    cur.execute(
                        f"""
                        BACKUP DATABASE [{self.current_db}]
                        TO DISK = ?
                        WITH COPY_ONLY, INIT, SKIP, CHECKSUM, STATS=1
                        """,
                        (bak,)
                    )
                    self._log(f"[OK] T·∫°o file .bak ki·ªÉm tra: {bak}")
                    try:
                        cur.execute("EXEC master..xp_cmdshell 'del " + bak.replace('\"', '\"\"') + "'")
                        self._log("[OK] Xo√° file .bak.")
                    except Exception as de:
                        self._log(f"[CH√ö √ù] Kh√¥ng xo√° ƒë∆∞·ª£c .bak qua xp_cmdshell: {de}")
                    self._log("[K·∫æT LU·∫¨N] SQL Server C√ì quy·ªÅn ghi (qua BACKUP).")
                except Exception as e:
                    self._log(f"[TH·∫§T B·∫†I] Kh√¥ng x√°c minh ƒë∆∞·ª£c quy·ªÅn ghi: {e}")
                    self._log("‚Ä¢ B·∫≠t xp_cmdshell (n·∫øu ph√π h·ª£p) ho·∫∑c c·∫•p quy·ªÅn ghi cho service account.")
            except Exception as e:
                self._log(f"[L·ªñI] {e}")

        threading.Thread(target=_work, daemon=True).start()

    # ======================================================================
    # Schedule actions
    # ======================================================================

    def _save_schedule(self):
        """L∆∞u CRON cho DB hi·ªán t·∫°i."""
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "H√£y ch·ªçn CSDL tr∆∞·ªõc khi l∆∞u l·ªãch.")
            return
        full = self.ent_full.get().strip()
        diff = self.ent_diff.get().strip()
        log  = self.ent_log.get().strip()

        # Validate c∆° b·∫£n: 5 tr∆∞·ªùng
        for s, nm in ((full, "FULL"), (diff, "DIFF"), (log, "LOG")):
            if not _CRON_RE.match(s or ""):
                messagebox.showwarning("CRON kh√¥ng h·ª£p l·ªá", f"L·ªãch {nm} ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng CRON (5 tr∆∞·ªùng).")
                return

        self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})\
            .setdefault("schedule", {}).update({"full": full, "diff": diff, "log": log})

        self.owner.save_config(silent=True)
        messagebox.showinfo("ƒê√£ l∆∞u", f"ƒê√£ l∆∞u l·ªãch backup cho [{self.current_db}].")

    # ======================================================================
    # Manual backup
    # ======================================================================

    def _run_manual_backup(self):
        """Ch·∫°y backup th·ªß c√¥ng cho DB hi·ªán ch·ªçn theo ki·ªÉu FULL/DIFF/LOG."""
        if not self.owner.conn:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", "K·∫øt n·ªëi SQL Server tr∆∞·ªõc.")
            return
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc khi backup.")
            return

        # L·∫•y th∆∞ m·ª•c l∆∞u ri√™ng c·ªßa DB n√†y
        per_db = self.owner.config.get("per_db", {})
        db_cfg = per_db.get(self.current_db, {})
        bdir = db_cfg.get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y.")
            return

        btype = self.cbo_type.get().strip().upper()
        self._clear_status()

        def _work():
            try:
                cur = self.owner.conn.cursor()

                # T·∫°o t√™n file
                ts = self.owner.timestamp_str() if hasattr(self.owner, "timestamp_str") else "YYYYMMDD_HHMMSS"
                if btype == "LOG":
                    target = f"{bdir}{self.current_db}_LOG_{ts}.trn"
                    sql = f"BACKUP LOG [{self.current_db}] TO DISK = ? WITH INIT, SKIP, CHECKSUM, STATS=1"
                elif btype == "DIFF":
                    target = f"{bdir}{self.current_db}_DIFF_{ts}.bak"
                    sql = f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH DIFFERENTIAL, INIT, SKIP, CHECKSUM, STATS=1"
                else:
                    target = f"{bdir}{self.current_db}_FULL_{ts}.bak"
                    sql = f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH INIT, SKIP, CHECKSUM, STATS=1"

                self._log(f"‚Üí [{self.current_db}] [{btype}] => {target}")
                cur.execute(sql, (target,))
                self._log("   ‚úì Ho√†n t·∫•t.")
            except Exception as e:
                self._log(f"[L·ªñI] {e}")

        threading.Thread(target=_work, daemon=True).start()

    # ======================================================================
    # Helpers
    # ======================================================================

    def _log(self, s: str):
        """Ghi log xu·ªëng h·ªôp tr·∫°ng th√°i cu·ªëi trang."""
        self.status_box.configure(state="normal")
        self.status_box.insert("end", s + "\n")
        self.status_box.see("end")
        self.status_box.configure(state="disabled")

    def _clear_status(self):
        self.status_box.configure(state="normal")
        self.status_box.delete("1.0", "end")
        self.status_box.configure(state="disabled")
