# -*- coding: utf-8 -*-
"""
K·ªãch b·∫£n Backup (phi√™n b·∫£n ho√†n ch·ªânh, ch·∫°y n·ªÅn th·ª±c s·ª±)
-------------------------------------------------------
Ch·ª©c nƒÉng:
- Ch·ªçn CSDL ‚Üí l∆∞u th∆∞ m·ª•c backup (tr√™n m√°y SQL)
- Ki·ªÉm tra quy·ªÅn ghi t·ª´ SQL Server (th·ª≠ BACKUP COPY_ONLY file test)
- L·ªãch backup (tham kh·∫£o) d√πng CRON 5 tr∆∞·ªùng ‚Üí √°nh x·∫° sang schtasks
  + H·ªó tr·ª£ c√°c m·∫´u ph·ªï bi·∫øn: DAILY, WEEKLY, MONTHLY, m·ªói N ph√∫t
- T·∫°o file PowerShell PS1 ch·∫°y backup (Full/Diff/Log), c√≥ ghi l·ªãch s·ª≠:
  <BasePath>\_TaskLogs\<DB>.log
- T·∫°o/X√≥a Task Scheduler (t·ª± n√¢ng quy·ªÅn UAC) ho·∫∑c hi·ªÉn th·ªã l·ªánh ƒë·ªÉ copy
- T√πy ch·ªçn RUN AS SYSTEM (kh√¥ng popup c·ª≠a s·ªï, ch·∫°y th·ª±c s·ª± n·ªÅn)
  + Khi ch·ªçn SYSTEM: kh√¥ng c·∫ßn user/pass; ch·∫°y session 0 ho√†n to√†n ·∫©n
  + N·∫øu kh√¥ng ch·ªçn SYSTEM: c√≥ th·ªÉ /RU /RP ƒë·ªÉ ch·∫°y ‚ÄúRun whether user...‚Äù
- Backup th·ªß c√¥ng (Full/Diff/Log) ngay t·ª´ UI

T√≠ch h·ª£p:
- T·ªáp n√†y l√† 1 CTkFrame, d√πng trong DatabasePage (lazy-load).
- C·∫•u h√¨nh ƒë∆∞·ª£c l∆∞u v√†o owner.config["per_db"][<db>] ƒë·ªÉ l·∫ßn sau t·ª± hi·ªán l·∫°i.

L∆∞u √Ω:
- N·∫øu xp_cmdshell b·ªã t·∫Øt, ph·∫ßn d·ªçn file test c√≥ th·ªÉ b·ªè qua. Vi·ªác ki·ªÉm tra
  quy·ªÅn ghi ch·ªß y·∫øu d·ª±a v√†o vi·ªác BACKUP th√†nh c√¥ng hay kh√¥ng.
"""

import os
import re
import sys
import ctypes
import tempfile
import threading
import subprocess
import customtkinter as ctk
from tkinter import messagebox, filedialog
from typing import Dict, Any, Optional, Tuple, List

# ----------------------------- CRON helpers -----------------------------

_CRON_RE = re.compile(r"^\s*([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s*$")

def _parse_cron(expr: str) -> Tuple[str, str, str, str, str]:
    """T√°ch chu·ªói CRON th√†nh 5 tr∆∞·ªùng (minute, hour, dom, mon, dow)."""
    m = _CRON_RE.match(expr or "")
    if not m:
        raise ValueError("Chu·ªói CRON kh√¥ng h·ª£p l·ªá (c·∫ßn 5 tr∆∞·ªùng).")
    return m.group(1), m.group(2), m.group(3), m.group(4), m.group(5)

def _dow_to_names(dow_field: str) -> List[str]:
    """
    DOW ‚Üí danh s√°ch t√™n vi·∫øt t·∫Øt: MON,TUE,... (SUN,MON,...SAT)
    H·ªó tr·ª£: s·ªë 0..7, 1..6; t√™n ƒë·∫ßy ƒë·ªß; d·∫£i; danh s√°ch.
    """
    num_map = {0: "SUN", 7: "SUN", 1: "MON", 2: "TUE", 3: "WED", 4: "THU", 5: "FRI", 6: "SAT"}
    names = []

    field = (dow_field or "").strip().upper()
    if field in ("*", "?"):
        return []

    parts = [p.strip() for p in field.replace(" ", "").split(",") if p.strip()]
    order = ["SUN","MON","TUE","WED","THU","FRI","SAT"]

    for p in parts:
        if "-" in p:
            a, b = p.split("-", 1)
            if a.isalpha():
                ia = order.index(a[:3])
                ib = order.index(b[:3])
                if ia <= ib:
                    names.extend(order[ia:ib+1])
                else:
                    names.extend(order[ia:] + order[:ib+1])
            else:
                ia = int(a)
                ib = int(b)
                rng = range(ia, ib+1) if ia <= ib else list(range(ia, 7)) + list(range(0, ib+1))
                for n in rng:
                    names.append(num_map.get(n, ""))
        else:
            if p.isalpha():
                names.append(p[:3])
            else:
                n = int(p)
                names.append(num_map.get(n, ""))

    out = []
    for n in names:
        if n and n not in out:
            out.append(n)
    return out

def _safe_time(minute: str, hour: str) -> str:
    """Chu·∫©n ho√° gi·ªù/ph√∫t ‚Üí 'HH:MM' cho schtasks /ST."""
    def norm_int(x: str, hi: int) -> int:
        v = int(x)
        return 0 if v < 0 else hi if v > hi else v
    h = 0 if hour == "*" else norm_int(hour, 23)
    m = 0 if minute == "*" or minute.startswith("*/") else norm_int(minute, 59)
    return f"{h:02d}:{m:02d}"

def cron_to_schtasks_args(expr: str) -> Dict[str, str]:
    """
    √Ånh x·∫° CRON (5 tr∆∞·ªùng) th√†nh tham s·ªë schtasks:
    - MINUTE:  */N * * * *
    - DAILY:   M H * * *
    - WEEKLY:  M H * * DOWs
    - MONTHLY: M H DOM * *
    """
    minute, hour, dom, mon, dow = _parse_cron(expr)

    if minute.startswith("*/") and hour == "*" and dom == "*" and mon == "*" and dow == "*":
        try:
            n = int(minute[2:])
            if n <= 0:
                raise ValueError
        except Exception:
            raise ValueError("CRON kh√¥ng h·ª£p l·ªá: m·∫´u '*/N * * * *' y√™u c·∫ßu N l√† s·ªë d∆∞∆°ng.")
        return {"type": "MINUTE", "st": "00:00", "mo": str(n), "du": "24:00"}

    dnames = _dow_to_names(dow)
    if dnames and dom == "*" and mon == "*" and hour != "*" and not minute.startswith("*/"):
        st = _safe_time(minute, hour)
        return {"type": "WEEKLY", "st": st, "dlist": ",".join(dnames)}

    if dom == "*" and mon == "*" and dow in ("*", "?") and hour != "*" and not minute.startswith("*/"):
        st = _safe_time(minute, hour)
        return {"type": "DAILY", "st": st}

    if mon in ("*",) and dow in ("*", "?") and hour != "*" and dom not in ("*", "?",):
        if "," in dom or "-" in dom:
            raise ValueError("CRON h√†ng th√°ng hi·ªán ch·ªâ h·ªó tr·ª£ 1 ng√†y c·ªë ƒë·ªãnh (vd: '0 2 1 * *').")
        try:
            day_num = int(dom)
            if not (1 <= day_num <= 31):
                raise ValueError
        except Exception:
            raise ValueError("Gi√° tr·ªã ng√†y-th√°ng (DOM) kh√¥ng h·ª£p l·ªá 1..31.")
        st = _safe_time(minute, hour)
        return {"type": "MONTHLY", "st": st, "dom": str(day_num)}

    raise ValueError("CRON ch∆∞a ƒë∆∞·ª£c h·ªó tr·ª£ trong √°nh x·∫° sang Task Scheduler (m·∫´u qu√° ph·ª©c t·∫°p).")

# ----------------------------- Admin helpers -----------------------------

def _is_admin() -> bool:
    """Ki·ªÉm tra ti·∫øn tr√¨nh ƒëang ch·∫°y c√≥ quy·ªÅn Administrator (Windows)."""
    try:
        return bool(ctypes.windll.shell32.IsUserAnAdmin())
    except Exception:
        return False

# --------------------------- Backup Scenario UI --------------------------

class ScheduleFrame(ctk.CTkFrame):
    """Khung k·ªãch b·∫£n backup: l∆∞u tr·ªØ, l·ªãch CRON, backup tay, schtasks."""

    def __init__(self, parent, owner_page):
        super().__init__(parent)
        self.owner = owner_page  # DatabasePage

        self.current_db: Optional[str] = None
        self.owner.config.setdefault("per_db", {})

        # LAYOUT CH√çNH
        self.grid_rowconfigure(9, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="K·ªãch b·∫£n Backup", font=ctk.CTkFont(size=18, weight="bold"))\
            .grid(row=0, column=0, padx=16, pady=(16, 8), sticky="w")

        self._build_db_selector(row=1)
        self._build_storage(row=2)
        self._build_schedule(row=3)
        self._build_manual_backup(row=4)
        self._build_task_scheduler(row=5)

        self.status_box = ctk.CTkTextbox(self, height=160)
        self.status_box.grid(row=6, column=0, padx=16, pady=(6, 16), sticky="nsew")
        self._log("‚Ä¢ Ch·ªçn CSDL, c√†i th∆∞ m·ª•c ƒë√≠ch, l∆∞u CRON, t·∫°o PS1, l·∫≠p l·ªãch, backup th·ªß c√¥ng.")

        self._init_db_selection()

    # ------------------------- Kh·ªëi UI nh·ªè -------------------------

    def _build_db_selector(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)
        ctk.CTkLabel(wrap, text="Ch·ªçn CSDL:").grid(row=0, column=0, padx=(12, 8), pady=8, sticky="e")
        values = sorted(list(self.owner.selected_databases)) if hasattr(self.owner, "selected_databases") else []
        self.cbo_db = ctk.CTkComboBox(wrap, values=values, width=260, command=lambda _: self._on_change_db())
        self.cbo_db.grid(row=0, column=1, padx=8, pady=8, sticky="w")
        ctk.CTkButton(wrap, text="‚Üª N·∫°p danh s√°ch", command=self._reload_db_list)\
            .grid(row=0, column=2, padx=8, pady=8, sticky="w")

    def _build_storage(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)
        ctk.CTkLabel(wrap, text="Th∆∞ m·ª•c l∆∞u tr·ªØ (tr√™n m√°y SQL Server):").grid(row=0, column=0, padx=(12, 8), pady=8, sticky="e")
        self.ent_dir = ctk.CTkEntry(wrap, width=460, placeholder_text=r"VD: E:\SQL_Backup\ ho·∫∑c \\server\share\backup")
        self.ent_dir.grid(row=0, column=1, padx=8, pady=8, sticky="w")
        ctk.CTkButton(wrap, text="Ch·ªçn (c·ª•c b·ªô)", command=self._choose_local_dir)\
            .grid(row=0, column=2, padx=8, pady=8, sticky="w")
        ctk.CTkButton(wrap, text="Ki·ªÉm tra quy·ªÅn ghi t·ª´ SQL Server", command=self._test_write_perm)\
            .grid(row=1, column=1, padx=8, pady=(0, 8), sticky="w")
        self.ent_dir.bind("<FocusOut>", lambda _: self._persist_for_current_db())

    def _build_schedule(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)
        wrap.grid_columnconfigure(2, weight=1)

        ctk.CTkLabel(wrap, text="L·ªãch FULL (CRON):").grid(row=0, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_full = ctk.CTkEntry(wrap, width=320); self.ent_full.grid(row=0, column=1, padx=8, pady=6, sticky="w")
        ctk.CTkLabel(wrap, text="L·ªãch DIFF (CRON):").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_diff = ctk.CTkEntry(wrap, width=320); self.ent_diff.grid(row=1, column=1, padx=8, pady=6, sticky="w")
        ctk.CTkLabel(wrap, text="L·ªãch LOG (CRON):").grid(row=2, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_log  = ctk.CTkEntry(wrap, width=320); self.ent_log.grid(row=2, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkButton(wrap, text="üíæ L∆∞u l·ªãch (tham kh·∫£o)", command=self._save_schedule)\
            .grid(row=3, column=1, padx=8, pady=(6, 8), sticky="w")

        cron_note = (
            "CRON 5 tr∆∞·ªùng: ph√∫t gi·ªù ng√†y-th√°ng th√°ng th·ª©\n"
            "V√≠ d·ª•:\n"
            "  0 0 * * 0      ‚Üí Ch·ªß nh·∫≠t 00:00 (FULL)\n"
            "  30 0 * * 1-6   ‚Üí T2‚ÄìT7 00:30 (DIFF)\n"
            "  */15 * * * *   ‚Üí M·ªói 15 ph√∫t (LOG)\n"
            "  0 2 1 * *      ‚Üí M√πng 1 h√†ng th√°ng 02:00"
        )
        ctk.CTkLabel(wrap, text=cron_note, justify="left", anchor="nw")\
            .grid(row=0, column=2, rowspan=4, padx=12, pady=6, sticky="nsew")

    def _build_manual_backup(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        ctk.CTkLabel(wrap, text="Backup th·ªß c√¥ng:", font=ctk.CTkFont(weight="bold")).grid(
            row=0, column=0, padx=12, pady=(10, 6), sticky="w"
        )
        ctk.CTkLabel(wrap, text="Ki·ªÉu:").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.cbo_type = ctk.CTkComboBox(wrap, values=["FULL", "DIFF", "LOG"], width=120)
        self.cbo_type.grid(row=1, column=1, padx=8, pady=6, sticky="w"); self.cbo_type.set("FULL")
        ctk.CTkButton(wrap, text="Ch·∫°y backup", command=self._run_manual_backup)\
            .grid(row=1, column=2, padx=8, pady=6, sticky="w")

    def _build_task_scheduler(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)
        wrap.grid_columnconfigure(3, weight=1)

        ctk.CTkLabel(wrap, text="Task Scheduler (Windows)", font=ctk.CTkFont(weight="bold"))\
            .grid(row=0, column=0, padx=12, pady=(10, 6), sticky="w")

        # Instance, Stripes, PS1 path
        ctk.CTkLabel(wrap, text="SQL Instance:").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_instance = ctk.CTkEntry(wrap, width=240); self.ent_instance.grid(row=1, column=1, padx=8, pady=6, sticky="w")
        ctk.CTkLabel(wrap, text="S·ªë striping files:").grid(row=1, column=2, padx=(12, 8), pady=6, sticky="e")
        self.spn_stripes = ctk.CTkEntry(wrap, width=80); self.spn_stripes.grid(row=1, column=3, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="L∆∞u script PS1 v√†o:").grid(row=2, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_ps1 = ctk.CTkEntry(wrap, width=420, placeholder_text=r"VD: C:\Scripts\Backup-Db.ps1")
        self.ent_ps1.grid(row=2, column=1, columnspan=2, padx=8, pady=6, sticky="w")
        ctk.CTkButton(wrap, text="Ch·ªçn...", command=self._choose_ps1_path).grid(row=2, column=3, padx=8, pady=6, sticky="w")

        # RUN AS SYSTEM (kh√¥ng b·∫≠t c·ª≠a s·ªï)
        self.chk_run_system_var = ctk.BooleanVar(value=True)
        ctk.CTkCheckBox(
            wrap,
            text="Ch·∫°y d∆∞·ªõi t√†i kho·∫£n SYSTEM (kh√¥ng hi·ªán c·ª≠a s·ªï)",
            variable=self.chk_run_system_var,
            command=self._on_toggle_run_system
        ).grid(row=3, column=0, padx=8, pady=(0, 8), sticky="w")

        # Run whether user is logged on or not
        self.chk_run_always_var = ctk.BooleanVar(value=False)
        ctk.CTkCheckBox(
            wrap,
            text="Run whether user is logged on or not (y√™u c·∫ßu t√†i kho·∫£n)",
            variable=self.chk_run_always_var
        ).grid(row=3, column=1, padx=8, pady=(0, 8), sticky="w")

        ctk.CTkLabel(wrap, text="User (DOMAIN\\User ho·∫∑c .\\User):").grid(row=4, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_user = ctk.CTkEntry(wrap, width=240); self.ent_user.grid(row=4, column=1, padx=8, pady=6, sticky="w")
        ctk.CTkLabel(wrap, text="Password:").grid(row=4, column=2, padx=(12, 8), pady=6, sticky="e")
        self.ent_pass = ctk.CTkEntry(wrap, width=180, show="*"); self.ent_pass.grid(row=4, column=3, padx=8, pady=6, sticky="w")

        # N√∫t thao t√°c
        rowb = 5
        ctk.CTkButton(wrap, text="‚úçÔ∏è T·∫°o file PS1", command=self._generate_ps1)\
            .grid(row=rowb, column=1, padx=8, pady=(8, 8), sticky="w")
        ctk.CTkButton(wrap, text="üîç Ki·ªÉm tra task", command=self._check_tasks)\
            .grid(row=rowb, column=2, padx=8, pady=(8, 8), sticky="w")
        ctk.CTkButton(wrap, text="üìã Hi·ªÉn th·ªã l·ªánh t·∫°o (copy ch·∫°y Admin)", command=self._show_commands)\
            .grid(row=rowb, column=3, padx=8, pady=(8, 8), sticky="w")

        ctk.CTkButton(wrap, text="üõ°Ô∏è T·∫°o schtasks (t·ª± n√¢ng quy·ªÅn)", command=self._create_tasks_elevated)\
            .grid(row=rowb+1, column=1, padx=8, pady=(0, 8), sticky="w")
        ctk.CTkButton(wrap, text="üóëÔ∏è X√≥a task (t·ª± n√¢ng quy·ªÅn)", command=self._delete_tasks_elevated)\
            .grid(row=rowb+1, column=2, padx=8, pady=(0, 8), sticky="w")

        # ƒê·ªìng b·ªô tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa user/pass khi b·∫≠t SYSTEM
        self._on_toggle_run_system()

    # -------------------------- DB selection --------------------------

    def _init_db_selection(self):
        values = sorted(list(self.owner.selected_databases)) if hasattr(self.owner, "selected_databases") else []
        if values and not self.cbo_db.get():
            self.cbo_db.set(values[0])
        self._on_change_db()

    def _reload_db_list(self):
        values = sorted(list(self.owner.selected_databases)) if hasattr(self.owner, "selected_databases") else []
        self.cbo_db.configure(values=values)
        if values:
            if self.cbo_db.get() not in values:
                self.cbo_db.set(values[0])
            self._on_change_db()
        else:
            self.cbo_db.set("")
            self.current_db = None
            self._clear_form()

    def _on_change_db(self):
        self.current_db = self.cbo_db.get().strip() or None
        if not self.current_db:
            self._clear_form(); return

        per_db = self.owner.config.setdefault("per_db", {})
        db_cfg: Dict[str, Any] = per_db.setdefault(self.current_db, {})
        db_cfg.setdefault("backup_dir", None)
        db_cfg.setdefault("schedule", {"full": "0 0 * * 0", "diff": "30 0 * * 1-6", "log": "*/15 * * * *"})
        db_cfg.setdefault("scheduler", {
            "instance": ".\\SQLEXPRESS", "stripes": 2, "ps1_path": "C:\\Scripts\\Backup-Db.ps1",
            "run_always": False, "user": "", "pass": "", "run_system": True
        })

        # Storage
        self.ent_dir.delete(0, "end")
        if db_cfg.get("backup_dir"):
            self.ent_dir.insert(0, db_cfg["backup_dir"])

        # Schedule
        sch = db_cfg.get("schedule", {})
        self.ent_full.delete(0, "end"); self.ent_full.insert(0, sch.get("full", "0 0 * * 0"))
        self.ent_diff.delete(0, "end"); self.ent_diff.insert(0, sch.get("diff", "30 0 * * 1-6"))
        self.ent_log.delete(0, "end");  self.ent_log.insert(0, sch.get("log",  "*/15 * * * *"))

        # Scheduler fields
        s2 = db_cfg.get("scheduler", {})
        self.ent_instance.delete(0, "end"); self.ent_instance.insert(0, s2.get("instance", ".\\SQLEXPRESS"))
        self.spn_stripes.delete(0, "end");   self.spn_stripes.insert(0, str(s2.get("stripes", 2)))
        self.ent_ps1.delete(0, "end");       self.ent_ps1.insert(0, s2.get("ps1_path", "C:\\Scripts\\Backup-Db.ps1"))
        self.chk_run_system_var.set(bool(s2.get("run_system", True)))
        self.chk_run_always_var.set(bool(s2.get("run_always", False)))
        self.ent_user.delete(0, "end"); self.ent_user.insert(0, s2.get("user", ""))
        self.ent_pass.delete(0, "end"); self.ent_pass.insert(0, s2.get("pass", ""))

        self._on_toggle_run_system()

    def _clear_form(self):
        self.ent_dir.delete(0, "end")
        self.ent_full.delete(0, "end"); self.ent_diff.delete(0, "end"); self.ent_log.delete(0, "end")
        self.ent_instance.delete(0, "end"); self.spn_stripes.delete(0, "end"); self.ent_ps1.delete(0, "end")
        self.chk_run_system_var.set(True); self.chk_run_always_var.set(False)
        self.ent_user.delete(0, "end"); self.ent_pass.delete(0, "end")
        self._on_toggle_run_system()

    def _persist_for_current_db(self):
        if not self.current_db: return
        path = self.ent_dir.get().strip() or None
        self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})["backup_dir"] = path
        self.owner.save_config(silent=True)
        self._log(f"‚Ä¢ ƒê√£ l∆∞u th∆∞ m·ª•c l∆∞u tr·ªØ cho [{self.current_db}]")

    # ----------------------------- Storage -----------------------------

    def _choose_local_dir(self):
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c (c·ª•c b·ªô)")
        if path:
            if not path.endswith(os.sep): path += os.sep
            self.ent_dir.delete(0, "end"); self.ent_dir.insert(0, path)
            self._persist_for_current_db()

    def _test_write_perm(self):
        """Ki·ªÉm tra quy·ªÅn ghi t·ª´ SQL Server b·∫±ng 1 BACKUP COPY_ONLY test."""
        if not self.owner.conn:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", "K·∫øt n·ªëi SQL Server tr∆∞·ªõc."); return
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc khi ki·ªÉm tra."); return
        target = self.ent_dir.get().strip()
        if not target:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Nh·∫≠p th∆∞ m·ª•c ƒë√≠ch tr√™n SQL Server."); return
        self._clear_status()

        def _work():
            try:
                conn = self.owner.conn
                restore_autocommit = getattr(conn, "autocommit", False)
                conn.autocommit = True
                cur = conn.cursor()

                # Th·ª≠ li·ªát k√™ th∆∞ m·ª•c (xp_dirtree c√≥ th·ªÉ t·∫Øt)
                try:
                    cur.execute("EXEC master..xp_dirtree ?,1,1", (target,))
                    self._log(f"[OK] xp_dirtree th·∫•y th∆∞ m·ª•c: {target}")
                except Exception as e:
                    self._log(f"[CH√ö √ù] xp_dirtree l·ªói (b·ªè qua): {e}")

                bak = os.path.join(target, f"{self.current_db}_PERM_TEST_{os.getpid()}.bak")
                try:
                    cur.execute(
                        f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH COPY_ONLY, INIT, SKIP, CHECKSUM, STATS = 1",
                        (bak,)
                    )
                    self._log(f"[OK] Ghi file .bak ki·ªÉm tra: {bak}")
                    self._log("[K·∫æT LU·∫¨N] SQL Server C√ì quy·ªÅn ghi v√†o th∆∞ m·ª•c.")
                except Exception as e:
                    self._log(f"[TH·∫§T B·∫†I] Kh√¥ng ghi ƒë∆∞·ª£c file .bak ki·ªÉm tra: {e}")
                finally:
                    # X√≥a file test n·∫øu xp_cmdshell b·∫≠t; n·∫øu t·∫Øt, b·ªè qua
                    try:
                        cur.execute("EXEC master..xp_cmdshell 'del " + bak.replace('\"', '\"\"') + "'")
                        self._log("[OK] ƒê√£ xo√° file ki·ªÉm tra (xp_cmdshell).")
                    except Exception:
                        pass
            except Exception as e:
                self._log(f"[L·ªñI] {e}")
            finally:
                try:
                    conn.autocommit = restore_autocommit
                except Exception:
                    pass

        threading.Thread(target=_work, daemon=True).start()

    # ------------------------------ Schedule -----------------------------

    def _save_schedule(self):
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc khi l∆∞u l·ªãch."); return
        full = self.ent_full.get().strip()
        diff = self.ent_diff.get().strip()
        log  = self.ent_log.get().strip()
        for s, nm in ((full,"FULL"),(diff,"DIFF"),(log,"LOG")):
            if not _CRON_RE.match(s or ""):
                messagebox.showwarning("CRON kh√¥ng h·ª£p l·ªá", f"L·ªãch {nm} ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng CRON (5 tr∆∞·ªùng)."); return
        db_cfg = self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})
        db_cfg.setdefault("schedule", {})["full"] = full; db_cfg["schedule"]["diff"] = diff; db_cfg["schedule"]["log"] = log
        self.owner.save_config(silent=True)
        messagebox.showinfo("ƒê√£ l∆∞u", f"ƒê√£ l∆∞u l·ªãch (tham kh·∫£o) cho [{self.current_db}].")

    # ----------------------------- Manual backup -------------------------

    def _run_manual_backup(self):
        if not self.owner.conn:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", "K·∫øt n·ªëi SQL Server tr∆∞·ªõc."); return
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc khi backup."); return
        per_db = self.owner.config.get("per_db", {})
        bdir = per_db.get(self.current_db, {}).get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y."); return
        btype = self.cbo_type.get().strip().upper()
        self._clear_status()

        def _work():
            try:
                conn = self.owner.conn
                restore_autocommit = getattr(conn, "autocommit", False)
                conn.autocommit = True
                cur = conn.cursor()
                ts = getattr(self.owner, "timestamp_str", lambda: "YYYYMMDD_HHMMSS")()
                if btype == "LOG":
                    target = f"{bdir}{self.current_db}_LOG_{ts}.trn"
                    sql = f"BACKUP LOG [{self.current_db}] TO DISK = ? WITH INIT, SKIP, CHECKSUM, STATS=1"
                elif btype == "DIFF":
                    target = f"{bdir}{self.current_db}_DIFF_{ts}.dif"
                    sql = f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH DIFFERENTIAL, INIT, SKIP, CHECKSUM, STATS=1"
                else:
                    target = f"{bdir}{self.current_db}_FULL_{ts}.bak"
                    sql = f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH INIT, SKIP, CHECKSUM, STATS=1"
                self._log(f"‚Üí [{self.current_db}] [{btype}] => {target}")
                cur.execute(sql, (target,))
                self._log("   ‚úì Ho√†n t·∫•t.")
            except Exception as e:
                self._log(f"[L·ªñI] {e}")
            finally:
                try:
                    conn.autocommit = restore_autocommit
                except Exception:
                    pass

        threading.Thread(target=_work, daemon=True).start()

    # ---------------------------- Task Scheduler -------------------------

    def _on_toggle_run_system(self):
        """B·∫≠t RUN AS SYSTEM ‚Üí disable user/pass & t·∫Øt c·ªù run_always."""
        run_sys = bool(self.chk_run_system_var.get())
        state = "disabled" if run_sys else "normal"
        if run_sys:
            self.chk_run_always_var.set(False)
        # enable/disable user/pass theo tr·∫°ng th√°i
        self.ent_user.configure(state=state)
        self.ent_pass.configure(state=state)

    def _choose_ps1_path(self):
        path = filedialog.asksaveasfilename(
            title="L∆∞u file PowerShell", defaultextension=".ps1",
            filetypes=[("PowerShell Script", "*.ps1"), ("All Files", "*.*")]
        )
        if path:
            self.ent_ps1.delete(0, "end"); self.ent_ps1.insert(0, path)
            self._persist_scheduler_fields()

    def _persist_scheduler_fields(self):
        if not self.current_db: return
        inst = self.ent_instance.get().strip() or ".\\SQLEXPRESS"
        try:
            stripes = int(self.spn_stripes.get().strip() or "1")
        except Exception:
            stripes = 1
        ps1 = self.ent_ps1.get().strip() or "C:\\Scripts\\Backup-Db.ps1"
        run_always = bool(self.chk_run_always_var.get())
        run_system = bool(self.chk_run_system_var.get())
        usr = self.ent_user.get().strip()
        pwd = self.ent_pass.get().strip()
        db_cfg = self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})
        sch = db_cfg.setdefault("scheduler", {})
        sch["instance"] = inst; sch["stripes"] = stripes; sch["ps1_path"] = ps1
        sch["run_always"] = run_always; sch["user"] = usr; sch["pass"] = pwd; sch["run_system"] = run_system
        self.owner.save_config(silent=True)

    def _generate_ps1(self):
        """Sinh PS1 c√≥ ghi l·ªãch s·ª≠ (LogPath)."""
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc."); return
        per_db = self.owner.config.get("per_db", {})
        bdir = per_db.get(self.current_db, {}).get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y."); return

        inst = self.ent_instance.get().strip() or ".\\SQLEXPRESS"
        try:
            stripes = int(self.spn_stripes.get().strip() or "1")
        except Exception:
            stripes = 1
        ps1_path = self.ent_ps1.get().strip() or "C:\\Scripts\\Backup-Db.ps1"

        # LogPath m·∫∑c ƒë·ªãnh: <BasePath>\_TaskLogs\<DB>.log
        log_dir = os.path.join(bdir.rstrip("\\/"), "_TaskLogs")
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, f"{self.current_db}.log")

        self._persist_scheduler_fields()

        ps1_content = f"""param(
  [Parameter(Mandatory=$true)] [string]$Instance,
  [Parameter(Mandatory=$true)] [string]$Database,
  [Parameter(Mandatory=$true)] [string]$BasePath,
  [Parameter(Mandatory=$true)] [ValidateSet("Full","Diff","Log")] [string]$Type,
  [Parameter(Mandatory=$true)] [int]$Stripes,
  [Parameter(Mandatory=$true)] [string]$LogPath
)

$ErrorActionPreference = "Stop"

function Write-Log($ok, $targets) {{
  try {{
    $ts = (Get-Date).ToString("s")
    $status = if ($ok) {{ "OK" }} else {{ "FAIL" }}
    $files = ($targets -join ";")
    "$ts|$Database|$Type|$status|$files" | Add-Content -LiteralPath $LogPath -Encoding UTF8
  }} catch {{ }}
}}

$day = Get-Date -Format "yyyyMMdd"
$dir = Join-Path $BasePath (Join-Path $Database (Join-Path $Type $day))
New-Item -ItemType Directory -Force -Path $dir | Out-Null

$time   = Get-Date -Format "HHmmss"
$ext    = if ($Type -eq "Log") {{ "trn" }} elseif ($Type -eq "Diff") {{ "dif" }} else {{ "bak" }}
$targets = @()
for ($i=1; $i -le $Stripes; $i++) {{
  $targets += (Join-Path $dir ("{self.current_db}_$($Type.ToUpper())_${{time}}_$i.$ext"))
}}
$disks = ($targets | ForEach-Object {{ "DISK = N'" + $_.Replace("'", "''") + "'" }}) -join ", "

try {{
  if ($Type -eq "Full") {{
    $tsql = @"
IF SERVERPROPERTY('EngineEdition') <> 4
BEGIN
  BACKUP DATABASE [{self.current_db}]
  TO $disks
  WITH COMPRESSION, CHECKSUM, STATS = 5;
END
ELSE
BEGIN
  BACKUP DATABASE [{self.current_db}]
  TO $disks
  WITH CHECKSUM, STATS = 5;
END;
RESTORE VERIFYONLY FROM $disks WITH CHECKSUM;
"@
  }}
  elseif ($Type -eq "Diff") {{
    $tsql = @"
BACKUP DATABASE [{self.current_db}]
TO $disks
WITH DIFFERENTIAL, CHECKSUM, STATS = 5;
"@
  }}
  else {{
    $tsql = @"
IF EXISTS (
  SELECT 1 FROM sys.dm_exec_requests
  WHERE command IN ('BACKUP DATABASE','BACKUP LOG')
    AND database_id = DB_ID(N'{self.current_db}')
)
BEGIN
  PRINT 'Backup in progress. Skipping LOG backup.';
  RETURN;
END;

BACKUP LOG [{self.current_db}]
TO $disks
WITH CHECKSUM, STATS = 5;
"@
  }}

  & sqlcmd -S $Instance -d master -E -b -Q $tsql
  if ($LASTEXITCODE -ne 0) {{ throw "Backup failed with exit code $LASTEXITCODE" }}
  Write-Log $true $targets
}}
catch {{
  Write-Log $false $targets
  throw
}}
"""
        os.makedirs(os.path.dirname(ps1_path), exist_ok=True)
        with open(ps1_path, "w", encoding="utf-8") as f:
            f.write(ps1_content)
        self._log(f"[OK] ƒê√£ ghi PS1: {ps1_path}\n‚Ä¢ LogPath m·∫∑c ƒë·ªãnh: {log_path}")
        messagebox.showinfo("T·∫°o PS1", f"ƒê√£ t·∫°o script:\n{ps1_path}\nLog s·∫Ω ghi t·∫°i:\n{log_path}")

    def _task_names(self) -> Dict[str, str]:
        db = self.current_db or "DB"
        return {"FULL": f"BK_FULL_{db}", "DIFF": f"BK_DIFF_{db}", "LOG": f"BK_LOG_{db}"}

    def _build_one_cmd(self, task_name: str, cron_expr: str, task_type: str,
                       ps_base_exec: str, run_always: bool, user: str, pwd: str,
                       run_as_system: bool) -> str:
        """
        Sinh l·ªánh schtasks cho 1 lo·∫°i task (Full/Diff/Log) t·ª´ CRON.
        - ps_base_exec ƒë√£ g·ªìm: powershell.exe -WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -File "..." ... -LogPath "..."
        - run_as_system=True ‚Üí /RU "SYSTEM" (ch·∫°y n·ªÅn th·ª±c s·ª±)
        - run_always=True (khi kh√¥ng d√πng SYSTEM) ‚Üí /RU "user" /RP "pass"
        """
        args = cron_to_schtasks_args(cron_expr)
        base = f'schtasks /Create /TN "{task_name}" /RL HIGHEST /F '

        if run_as_system:
            base += '/RU "SYSTEM" '
        else:
            if run_always:
                if not user or not pwd:
                    raise ValueError("C·∫ßn nh·∫≠p User/Password khi b·∫≠t 'Run whether user is logged on or not'.")
                base += f'/RU "{user}" /RP "{pwd}" '

        if args["type"] == "MINUTE":
            return (base + f'/SC MINUTE /MO {args["mo"]} /ST {args["st"]} /DU {args["du"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        if args["type"] == "DAILY":
            return (base + f'/SC DAILY /ST {args["st"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        if args["type"] == "WEEKLY":
            dlist = args.get("dlist", "")
            if not dlist:
                raise ValueError("CRON tu·∫ßn ph·∫£i c√≥ danh s√°ch th·ª©.")
            return (base + f'/SC WEEKLY /D {dlist} /ST {args["st"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        if args["type"] == "MONTHLY":
            dom = args.get("dom", "")
            return (base + f'/SC MONTHLY /D {dom} /ST {args["st"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        raise ValueError("Kh√¥ng h·ªó tr·ª£ lo·∫°i CRON n√†y.")

    def _build_schtasks_cmds(self) -> Optional[Dict[str, str]]:
        """Sinh 3 l·ªánh schtasks t·ª´ c·∫•u h√¨nh hi·ªán t·∫°i; ki·ªÉm tra PS1 t·ªìn t·∫°i."""
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc."); return None

        per_db = self.owner.config.get("per_db", {})
        db_cfg = per_db.get(self.current_db, {})
        bdir = db_cfg.get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y."); return None

        schd = db_cfg.get("schedule", {})
        cron_full = schd.get("full", "")
        cron_diff = schd.get("diff", "")
        cron_log  = schd.get("log",  "")

        sch2 = db_cfg.get("scheduler", {})
        inst = (sch2.get("instance") or self.ent_instance.get().strip() or ".\\SQLEXPRESS").replace('"','\\"')
        stripes = int(str(sch2.get("stripes", self.spn_stripes.get().strip() or "1")))
        ps1_path_in = (sch2.get("ps1_path") or self.ent_ps1.get().strip() or "C:\\Scripts\\Backup-Db.ps1")
        run_always = bool(sch2.get("run_always", self.chk_run_always_var.get()))
        run_system = bool(sch2.get("run_system", self.chk_run_system_var.get()))
        user = sch2.get("user") or self.ent_user.get().strip()
        pwd  = sch2.get("pass") or self.ent_pass.get().strip()

        if not os.path.isfile(ps1_path_in):
            messagebox.showerror("Thi·∫øu script PS1", f"Kh√¥ng t√¨m th·∫•y file PS1:\n{ps1_path_in}\nH√£y t·∫°o b·∫±ng '‚úçÔ∏è T·∫°o file PS1' tr∆∞·ªõc.")
            return None

        # LogPath m·∫∑c ƒë·ªãnh
        log_dir = os.path.join(bdir.rstrip("\\/"), "_TaskLogs")
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, f"{self.current_db}.log")

        # Base exec: -WindowStyle Hidden + -NoProfile (kh√¥ng nh√°y c·ª≠a s·ªï khi ch·∫°y d∆∞·ªõi SYSTEM)
        dbn  = self.current_db.replace('"','\\"')
        base  = bdir.rstrip("\\/").replace('"','\\"')
        ps1   = ps1_path_in.replace('"','\\"')
        ps_exec = (f'powershell.exe -WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass '
                   f'-File "{ps1}" -Instance "{inst}" -Database "{dbn}" -BasePath "{base}" '
                   f'-Stripes {stripes} -LogPath "{log_path}"')

        names = self._task_names()
        cmds: Dict[str, str] = {}
        try:
            cmds[names["FULL"]] = self._build_one_cmd(names["FULL"], cron_full, "Full", ps_exec, run_always, user, pwd, run_system)
            cmds[names["DIFF"]] = self._build_one_cmd(names["DIFF"], cron_diff, "Diff", ps_exec, run_always, user, pwd, run_system)
            cmds[names["LOG"]]  = self._build_one_cmd(names["LOG"],  cron_log,  "Log",  ps_exec, run_always, user, pwd, run_system)
        except ValueError as e:
            messagebox.showerror("CRON kh√¥ng h·ªó tr·ª£", str(e)); return None

        self._persist_scheduler_fields()
        return cmds

    def _task_exists(self, task_name: str) -> bool:
        try:
            proc = subprocess.run(['schtasks','/Query','/TN',task_name], capture_output=True, text=True, shell=False)
            return proc.returncode == 0
        except Exception as e:
            self._log(f"[L·ªñI] Query task {task_name}: {e}")
            return False

    def _check_tasks(self):
        names = self._task_names()
        self._clear_status()
        self._log("=== Ki·ªÉm tra Task Scheduler ===")
        for label, tname in [("FULL", names["FULL"]), ("DIFF", names["DIFF"]), ("LOG", names["LOG"])]:
            exists = self._task_exists(tname)
            self._log(f"{label}: {tname} -> {'ƒê√É T·ªíN T·∫†I' if exists else 'CH∆ØA C√ì'}")
        messagebox.showinfo("Ki·ªÉm tra task", "ƒê√£ hi·ªÉn th·ªã tr·∫°ng th√°i trong khung log.")

    def _create_tasks_elevated(self):
        cmds = self._build_schtasks_cmds()
        if not cmds: return
        try:
            with tempfile.NamedTemporaryFile(prefix="create_tasks_", suffix=".cmd", delete=False, mode="w", encoding="utf-8") as tf:
                batch_path = tf.name
                tf.write("@echo on\r\n")
                for _, cmd in cmds.items():
                    tf.write(cmd + "\r\n")
                tf.write("echo.\r\n")
                tf.write("echo ===== Done. Press any key to close... =====\r\n")
                tf.write("pause > nul\r\n")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng t·∫°o ƒë∆∞·ª£c file batch: {e}"); return

        try:
            self._log(f"‚Üí M·ªü Administrator v√† t·∫°o task b·∫±ng: {batch_path}")
            rc = ctypes.windll.shell32.ShellExecuteW(None, "runas", "cmd.exe", f'/c "{batch_path}"', None, 1)
            if rc <= 32:
                messagebox.showerror("Kh√¥ng th·ªÉ n√¢ng quy·ªÅn", f"M√£ l·ªói ShellExecute: {rc}\nCh·∫°y tay file:\n{batch_path}")
            else:
                messagebox.showinfo("ƒêang t·∫°o task", "C·ª≠a s·ªï Administrator ƒë√£ m·ªü ƒë·ªÉ t·∫°o task.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·∫°y n√¢ng quy·ªÅn: {e}\nH√£y ch·∫°y tay file:\n{batch_path}")

    def _delete_tasks_elevated(self):
        names = self._task_names()
        try:
            with tempfile.NamedTemporaryFile(prefix="delete_tasks_", suffix=".cmd", delete=False, mode="w", encoding="utf-8") as tf:
                batch_path = tf.name
                tf.write("@echo on\r\n")
                for tname in [names["FULL"], names["DIFF"], names["LOG"]]:
                    tf.write(f'schtasks /Delete /TN "{tname}" /F\r\n')
                tf.write("echo.\r\n")
                tf.write("echo ===== Done. Press any key to close... =====\r\n")
                tf.write("pause > nul\r\n")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng t·∫°o ƒë∆∞·ª£c file batch: {e}"); return

        try:
            self._log(f"‚Üí M·ªü Administrator v√† xo√° task b·∫±ng: {batch_path}")
            rc = ctypes.windll.shell32.ShellExecuteW(None, "runas", "cmd.exe", f'/c "{batch_path}"', None, 1)
            if rc <= 32:
                messagebox.showerror("Kh√¥ng th·ªÉ n√¢ng quy·ªÅn", f"M√£ l·ªói ShellExecute: {rc}\nCh·∫°y tay file:\n{batch_path}")
            else:
                messagebox.showinfo("ƒêang xo√° task", "C·ª≠a s·ªï Administrator ƒë√£ m·ªü ƒë·ªÉ xo√° task.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·∫°y n√¢ng quy·ªÅn: {e}\nH√£y ch·∫°y tay file:\n{batch_path}")

    def _show_commands(self):
        cmds = self._build_schtasks_cmds()
        if not cmds: return
        self._clear_status()
        self._log("=== L·ªánh schtasks (copy & ch·∫°y trong PowerShell/Command Prompt Run as Administrator) ===")
        for name, cmd in cmds.items():
            self._log(f"\n# {name}\n{cmd}")
        messagebox.showinfo("L·ªánh ƒë√£ s·∫µn s√†ng",
                            "C√°c l·ªánh ƒë√£ hi·ªÉn th·ªã trong √¥ tr·∫°ng th√°i ph√≠a d∆∞·ªõi.\n"
                            "H√£y m·ªü PowerShell/Command Prompt 'Run as Administrator' v√† copy ch·∫°y.")

    # ------------------------------- Utils -------------------------------

    def _log(self, s: str):
        self.status_box.configure(state="normal"); self.status_box.insert("end", s + "\n")
        self.status_box.see("end"); self.status_box.configure(state="disabled")

    def _clear_status(self):
        self.status_box.configure(state="normal"); self.status_box.delete("1.0", "end"); self.status_box.configure(state="disabled")
