# -*- coding: utf-8 -*-
"""
- Ch·∫°y Task b·∫±ng t√†i kho·∫£n ng∆∞·ªùi d√πng (Run whether user is logged on or not = True)
  => kh√¥ng m·ªü c·ª≠a s·ªï, ch·∫°y n·ªÅn th·ª±c s·ª±, ƒë√≤i h·ªèi /RU v√† /RP
- PS1 h·ªó tr·ª£ SqlUser/SqlPass (khi t√†i kho·∫£n Windows kh√¥ng c√≥ quy·ªÅn tr√™n SQL)
- CRON ‚Üí schtasks (m·∫´u ph·ªï bi·∫øn)
- Ki·ªÉm tra Task, t·∫°o/x√≥a Task (t·ª± n√¢ng quy·ªÅn UAC)
- Ki·ªÉm tra quy·ªÅn ghi (BACKUP COPY_ONLY), backup th·ªß c√¥ng
- L∆∞u/ƒë·ªçc c·∫•u h√¨nh theo t·ª´ng DB (owner.config["per_db"][db_name])
"""
import os
import re
import ctypes
import tempfile
import threading
import subprocess
import customtkinter as ctk
from tkinter import messagebox, filedialog
from typing import Dict, Any, Optional, Tuple, List

# ============================ H·ªñ TR·ª¢ CRON ============================

_CRON_RE = re.compile(r"^\s*([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s+([^\s]+)\s*$")

def _parse_cron(expr: str) -> Tuple[str, str, str, str, str]:
    """T√°ch 5 tr∆∞·ªùng CRON: ph√∫t, gi·ªù, ng√†y-th√°ng, th√°ng, th·ª©."""
    m = _CRON_RE.match(expr or "")
    if not m:
        raise ValueError("Chu·ªói CRON kh√¥ng h·ª£p l·ªá (ph·∫£i c√≥ 5 tr∆∞·ªùng).")
    return m.group(1), m.group(2), m.group(3), m.group(4), m.group(5)

def _dow_to_names(dow_field: str) -> List[str]:
    """
    Chuy·ªÉn tr∆∞·ªùng 'th·ª©' c·ªßa CRON th√†nh danh s√°ch t√™n vi·∫øt t·∫Øt MON..SUN.
    H·ªó tr·ª£ s·ªë (0..7), t√™n (MON..SUN), d·∫£i (MON-FRI), danh s√°ch (MON,WED,FRI).
    """
    num_map = {0: "SUN", 7: "SUN", 1: "MON", 2: "TUE", 3: "WED", 4: "THU", 5: "FRI", 6: "SAT"}
    names = []
    field = (dow_field or "").strip().upper()
    if field in ("*", "?"):
        return []
    parts = [p.strip() for p in field.replace(" ", "").split(",") if p.strip()]
    order = ["SUN","MON","TUE","WED","THU","FRI","SAT"]

    for p in parts:
        if "-" in p:
            a, b = p.split("-", 1)
            if a.isalpha():
                ia = order.index(a[:3]); ib = order.index(b[:3])
                if ia <= ib: names.extend(order[ia:ib+1])
                else: names.extend(order[ia:] + order[:ib+1])
            else:
                ia = int(a); ib = int(b)
                rng = range(ia, ib+1) if ia <= ib else list(range(ia, 7)) + list(range(0, ib+1))
                for n in rng: names.append(num_map.get(n, ""))
        else:
            if p.isalpha(): names.append(p[:3])
            else: names.append(num_map.get(int(p), ""))

    out = []
    for n in names:
        if n and n not in out: out.append(n)
    return out

def _safe_time(minute: str, hour: str) -> str:
    """Chu·∫©n ho√° gi·ªù/ph√∫t ‚Üí 'HH:MM' cho schtasks /ST (n·∫øu '*' th√¨ 00)."""
    def norm_int(x: str, hi: int) -> int:
        v = int(x)
        return 0 if v < 0 else hi if v > hi else v
    h = 0 if hour == "*" else norm_int(hour, 23)
    m = 0 if minute == "*" or minute.startswith("*/") else norm_int(minute, 59)
    return f"{h:02d}:{m:02d}"

def cron_to_schtasks_args(expr: str) -> Dict[str, str]:
    """
    √Ånh x·∫° CRON (5 tr∆∞·ªùng) sang tham s·ªë schtasks:
      - M·ªói N ph√∫t:  */N * * * *  ‚Üí /SC MINUTE /MO N /DU 24:00 /ST 00:01
      - H·∫±ng ng√†y   :   M H * * *  ‚Üí /SC DAILY  /ST H:M
      - H·∫±ng tu·∫ßn   :   M H * * D  ‚Üí /SC WEEKLY /D Dlist /ST H:M
      - H√†ng th√°ng  :   M H DOM * * ‚Üí /SC MONTHLY /D DOM /ST H:M (ch·ªâ 1 ng√†y)
    """
    minute, hour, dom, mon, dow = _parse_cron(expr)

    # M·ªói N ph√∫t
    if minute.startswith("*/") and hour == "*" and dom == "*" and mon == "*" and dow == "*":
        try:
            n = int(minute[2:])
            if n <= 0: raise ValueError
        except Exception:
            raise ValueError("CRON kh√¥ng h·ª£p l·ªá: '*/N * * * *' y√™u c·∫ßu N > 0.")
        return {"type": "MINUTE", "st": "00:01", "mo": str(n), "du": "24:00"}

    # H·∫±ng tu·∫ßn
    dnames = _dow_to_names(dow)
    if dnames and dom == "*" and mon == "*" and hour != "*" and not minute.startswith("*/"):
        st = _safe_time(minute, hour)
        return {"type": "WEEKLY", "st": st, "dlist": ",".join(dnames)}

    # H·∫±ng ng√†y
    if dom == "*" and mon == "*" and dow in ("*", "?") and hour != "*" and not minute.startswith("*/"):
        st = _safe_time(minute, hour)
        return {"type": "DAILY", "st": st}

    # H√†ng th√°ng (DOM = 1..31)
    if mon in ("*",) and dow in ("*", "?") and hour != "*" and dom not in ("*", "?",):
        if "," in dom or "-" in dom:
            raise ValueError("CRON h√†ng th√°ng ch·ªâ h·ªó tr·ª£ 1 ng√†y c·ªë ƒë·ªãnh (vd: '0 2 1 * *').")
        try:
            day_num = int(dom)
            if not (1 <= day_num <= 31): raise ValueError
        except Exception:
            raise ValueError("Gi√° tr·ªã ng√†y-th√°ng (DOM) kh√¥ng h·ª£p l·ªá 1..31.")
        st = _safe_time(minute, hour)
        return {"type": "MONTHLY", "st": st, "dom": str(day_num)}

    raise ValueError("CRON ch∆∞a h·ªó tr·ª£ √°nh x·∫° sang schtasks (m·∫´u qu√° ph·ª©c t·∫°p).")

# ======================= L·ªöP GIAO DI·ªÜN CH√çNH BACKUP =======================

class ScheduleFrame(ctk.CTkFrame):
    """
    Khung ‚ÄúK·ªãch b·∫£n Backup‚Äù:
      - Ch·ªçn DB, th∆∞ m·ª•c backup
      - L·ªãch CRON (tham kh·∫£o ‚Üí √°nh x·∫° schtasks)
      - T·∫°o script PS1 (ghi l·ªãch s·ª≠)
      - T·∫°o/Xo√° Task (run whether user is logged on or not) ‚Üí b·∫Øt bu·ªôc nh·∫≠p RU/RP
      - Hi·ªÉn th·ªã l·ªánh ƒë·ªÉ copy
      - Backup th·ªß c√¥ng
    """

    def __init__(self, parent, owner_page):
        super().__init__(parent)
        self.owner = owner_page
        self.current_db: Optional[str] = None
        self.owner.config.setdefault("per_db", {})

        # B·ªë c·ª•c t·ªïng th·ªÉ
        self.grid_rowconfigure(6, weight=1)
        self.grid_columnconfigure(0, weight=1)

        ctk.CTkLabel(self, text="K·ªãch b·∫£n Backup", font=ctk.CTkFont(size=18, weight="bold"))\
            .grid(row=0, column=0, padx=16, pady=(16, 8), sticky="w")

        self._build_db_selector(row=1)
        self._build_storage(row=2)
        self._build_schedule(row=3)
        self._build_manual_backup(row=4)
        self._build_task_scheduler(row=5)

        # Khung log tr·∫°ng th√°i
        self.status_box = ctk.CTkTextbox(self, width=1, height=1, wrap = "word", font=ctk.CTkFont(family="Consolas", size=11))
        self.status_box.grid(row=6, column=0, padx=16, pady=(6, 16), sticky="nsew")
        self._log("‚Ä¢ Ch·ªçn CSDL, nh·∫≠p th∆∞ m·ª•c ƒë√≠ch, c·∫•u h√¨nh CRON, t·∫°o PS1, l·∫≠p l·ªãch b·∫±ng schtasks, ho·∫∑c backup th·ªß c√¥ng.")

        # Kh·ªüi t·∫°o DB ƒëang ch·ªçn
        self._init_db_selection()

    # ------------------------ Kh·ªëi UI: ch·ªçn DB ------------------------

    def _build_db_selector(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(wrap, text="Ch·ªçn CSDL:").grid(row=0, column=0, padx=(12, 8), pady=8, sticky="e")

        values = sorted(list(self.owner.selected_databases)) if hasattr(self.owner, "selected_databases") else []
        self.cbo_db = ctk.CTkComboBox(wrap, values=values, width=260, command=lambda _: self._on_change_db())
        self.cbo_db.grid(row=0, column=1, padx=8, pady=8, sticky="w")

        ctk.CTkButton(wrap, text="‚Üª T·∫£i danh s√°ch CSDL", command=self._reload_db_list)\
            .grid(row=0, column=2, padx=8, pady=8, sticky="w")

    # --------------------- Kh·ªëi UI: th∆∞ m·ª•c l∆∞u tr·ªØ ---------------------

    def _build_storage(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)

        ctk.CTkLabel(wrap, text="Th∆∞ m·ª•c l∆∞u tr·ªØ (tr√™n m√°y SQL Server):").grid(row=0, column=0, padx=(12, 8), pady=8, sticky="e")
        self.ent_dir = ctk.CTkEntry(wrap, width=460, placeholder_text=r"VD: E:\SQL_Backup\ ho·∫∑c \\server\share\backup")
        self.ent_dir.grid(row=0, column=1, padx=8, pady=8, sticky="w")

        ctk.CTkButton(wrap, text="Ch·ªçn th∆∞ m·ª•c", command=self._choose_local_dir)\
            .grid(row=0, column=2, padx=8, pady=8, sticky="w")

        ctk.CTkButton(wrap, text="Ki·ªÉm tra quy·ªÅn ghi t·ª´ SQL Server", command=self._test_write_perm_model)\
            .grid(row=1, column=1, padx=8, pady=(0, 8), sticky="w")

        # L∆∞u ngay khi r·ªùi √¥ nh·∫≠p
        self.ent_dir.bind("<FocusOut>", lambda _: self._persist_for_current_db())

    # --------------------- Kh·ªëi UI: l·ªãch (CRON tham kh·∫£o) ---------------------

    def _build_schedule(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)
        wrap.grid_columnconfigure(2, weight=1)

        ctk.CTkLabel(wrap, text="L·ªãch FULL (CRON):").grid(row=0, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_full = ctk.CTkEntry(wrap, width=320); self.ent_full.grid(row=0, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="L·ªãch DIFF (CRON):").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_diff = ctk.CTkEntry(wrap, width=320); self.ent_diff.grid(row=1, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="L·ªãch LOG (CRON):").grid(row=2, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_log  = ctk.CTkEntry(wrap, width=320); self.ent_log.grid(row=2, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkButton(wrap, text="üíæ L∆∞u l·ªãch", command=self._save_schedule)\
            .grid(row=3, column=1, padx=8, pady=(6, 8), sticky="w")

        cron_note = (
            "CRON 5 tr∆∞·ªùng: ph√∫t gi·ªù ng√†y-th√°ng th√°ng th·ª©\n"
            "V√≠ d·ª•:\n"
            "      0 0 * * 0      ‚Üí Ch·ªß nh·∫≠t 00:00 (FULL)\n"
            "      30 0 * * 1-6   ‚Üí T2‚ÄìT7 00:30 (DIFF)\n"
            "      */15 * * * *   ‚Üí M·ªói 15 ph√∫t (LOG)\n"
            "      0 2 1 * *      ‚Üí M√πng 1 h√†ng th√°ng v√†o l√∫c 02:00"
        )
        ctk.CTkLabel(wrap, text=cron_note, justify="left", anchor="nw")\
            .grid(row=0, column=2, rowspan=4, padx=12, pady=6, sticky="nsew")

    # --------------------- Kh·ªëi UI: backup th·ªß c√¥ng ---------------------

    def _build_manual_backup(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")

        ctk.CTkLabel(wrap, text="Backup th·ªß c√¥ng:", font=ctk.CTkFont(weight="bold"))\
            .grid(row=0, column=0, padx=12, pady=(10, 6), sticky="w")

        ctk.CTkLabel(wrap, text="Ki·ªÉu:").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.cbo_type = ctk.CTkComboBox(wrap, values=["FULL", "DIFF", "LOG"], width=120)
        self.cbo_type.grid(row=1, column=1, padx=8, pady=6, sticky="w"); self.cbo_type.set("FULL")

        ctk.CTkButton(wrap, text="Ch·∫°y backup", command=self._run_manual_backup)\
            .grid(row=1, column=2, padx=8, pady=6, sticky="w")

    # --------------------- Kh·ªëi UI: Task Scheduler ---------------------

    def _build_task_scheduler(self, row: int):
        wrap = ctk.CTkFrame(self)
        wrap.grid(row=row, column=0, padx=16, pady=8, sticky="ew")
        wrap.grid_columnconfigure(1, weight=1)
        wrap.grid_columnconfigure(3, weight=1)

        ctk.CTkLabel(wrap, text="Task Scheduler (Windows)", font=ctk.CTkFont(weight="bold"))\
            .grid(row=0, column=0, padx=12, pady=(10, 6), sticky="w")

        # Th√¥ng s·ªë ch√≠nh
        ctk.CTkLabel(wrap, text="SQL Instance:").grid(row=1, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_instance = ctk.CTkEntry(wrap, width=240); self.ent_instance.grid(row=1, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="S·ªë strips (file):").grid(row=1, column=2, padx=(12, 8), pady=6, sticky="e")
        self.spn_stripes = ctk.CTkEntry(wrap, width=80); self.spn_stripes.grid(row=1, column=3, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="L∆∞u script powershell v√†o:").grid(row=2, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_ps1 = ctk.CTkEntry(wrap, width=420, placeholder_text=r"VD: C:\Scripts\Backup-Db.ps1")
        self.ent_ps1.grid(row=2, column=1, columnspan=2, padx=8, pady=6, sticky="w")
        ctk.CTkButton(wrap, text="Thay ƒë·ªïi v·ªã tr√≠ l∆∞u", command=self._choose_ps1_path).grid(row=2, column=3, padx=8, pady=6, sticky="w")

        # Run whether user... (m·∫∑c ƒë·ªãnh True, kh√¥ng cho t·∫Øt ƒë·ªÉ ƒë√°p ·ª©ng y√™u c·∫ßu)
        self.chk_run_always_var = ctk.BooleanVar(value=True)
        cb = ctk.CTkCheckBox(
            wrap,
            text="Run whether user is logged on or not (ch·∫°y n·ªÅn, c·∫ßn User/Password)",
            variable=self.chk_run_always_var
        )
        cb.grid(row=3, column=0, columnspan=2, padx=8, pady=(0, 8), sticky="w")
        cb.configure(state="disabled")  # Kh√¥ng cho t·∫Øt 

        # User/Pass c·ªßa Windows (b·∫Øt bu·ªôc khi d√πng run whether...)
        ctk.CTkLabel(wrap, text="User (DOMAIN\\User ho·∫∑c User):").grid(row=4, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_user = ctk.CTkEntry(wrap, width=240); self.ent_user.grid(row=4, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="Password:").grid(row=4, column=2, padx=(12, 8), pady=6, sticky="e")
        self.ent_pass = ctk.CTkEntry(wrap, width=180, show="*"); self.ent_pass.grid(row=4, column=3, padx=8, pady=6, sticky="w")

        # SQL Auth (tu·ª≥ ch·ªçn) ‚Äì d√πng khi t√†i kho·∫£n Windows KH√îNG c√≥ quy·ªÅn tr√™n SQL
        ctk.CTkLabel(wrap, text="SQL User (khi t√†i kho·∫£n windows ko c√≥ quy·ªÅn ƒëƒÉng nh·∫≠p SQL Server):").grid(row=5, column=0, padx=(12, 8), pady=6, sticky="e")
        self.ent_sql_user = ctk.CTkEntry(wrap, width=240); self.ent_sql_user.grid(row=5, column=1, padx=8, pady=6, sticky="w")

        ctk.CTkLabel(wrap, text="SQL Pass:").grid(row=5, column=2, padx=(12, 8), pady=6, sticky="e")
        self.ent_sql_pass = ctk.CTkEntry(wrap, width=180, show="*"); self.ent_sql_pass.grid(row=5, column=3, padx=8, pady=6, sticky="w")

        # N√∫t thao t√°c
        rowb = 6
        ctk.CTkButton(wrap, text="‚úçÔ∏è T·∫°o file script", command=self._generate_ps1)\
            .grid(row=rowb, column=1, padx=8, pady=(8, 8), sticky="w")
        ctk.CTkButton(wrap, text="üîç Ki·ªÉm tra task", command=self._check_tasks)\
            .grid(row=rowb, column=2, padx=8, pady=(8, 8), sticky="w")
        ctk.CTkButton(wrap, text="üìã Hi·ªÉn th·ªã l·ªánh t·∫°o (copy ch·∫°y Admin)", command=self._show_commands)\
            .grid(row=rowb, column=3, padx=8, pady=(8, 8), sticky="w")

        ctk.CTkButton(wrap, text="üõ°Ô∏è T·∫°o schtasks (y√™u c·∫ßu quy·ªÅn Admin)", command=self._create_tasks_elevated)\
            .grid(row=rowb+1, column=1, padx=8, pady=(0, 8), sticky="w")
        ctk.CTkButton(wrap, text="üóëÔ∏è X√≥a task (y√™u c·∫ßu quy·ªÅn Admin)", command=self._delete_tasks_elevated)\
            .grid(row=rowb+1, column=2, padx=8, pady=(0, 8), sticky="w")

    # ============================ DB selection ============================

    def _init_db_selection(self):
        values = sorted(list(self.owner.selected_databases)) if hasattr(self.owner, "selected_databases") else []
        if values and not self.cbo_db.get():
            self.cbo_db.set(values[0])
        self._on_change_db()

    def _reload_db_list(self):
        values = sorted(list(self.owner.selected_databases)) if hasattr(self.owner, "selected_databases") else []
        self.cbo_db.configure(values=values)
        if values:
            if self.cbo_db.get() not in values:
                self.cbo_db.set(values[0])
            self._on_change_db()
        else:
            self.cbo_db.set(""); self.current_db = None; self._clear_form()

    def _on_change_db(self):
        """N·∫°p c·∫•u h√¨nh ƒë√£ l∆∞u cho DB hi·ªán t·∫°i (n·∫øu c√≥)."""
        self.current_db = self.cbo_db.get().strip() or None
        if not self.current_db:
            self._clear_form(); return

        per_db = self.owner.config.setdefault("per_db", {})
        db_cfg: Dict[str, Any] = per_db.setdefault(self.current_db, {})
        db_cfg.setdefault("backup_dir", None)
        db_cfg.setdefault("schedule", {"full": "0 0 * * 0", "diff": "30 0 * * 1-6", "log": "*/15 * * * *"})
        db_cfg.setdefault("scheduler", {
            "instance": ".\\SQLEXPRESS", "stripes": 2, "ps1_path": "C:\\Scripts\\Backup-Db.ps1",
            "run_always": True, "user": "", "pass": "", "sql_user": "", "sql_pass": ""
        })

        # Storage
        self.ent_dir.delete(0, "end")
        if db_cfg.get("backup_dir"):
            self.ent_dir.insert(0, db_cfg["backup_dir"])

        # Schedule
        sch = db_cfg.get("schedule", {})
        self.ent_full.delete(0, "end"); self.ent_full.insert(0, sch.get("full", "0 0 * * 0"))
        self.ent_diff.delete(0, "end"); self.ent_diff.insert(0, sch.get("diff", "30 0 * * 1-6"))
        self.ent_log.delete(0, "end");  self.ent_log.insert(0,  sch.get("log",  "*/15 * * * *"))

        # Scheduler
        s2 = db_cfg.get("scheduler", {})
        self.ent_instance.delete(0, "end"); self.ent_instance.insert(0, s2.get("instance", ".\\SQLEXPRESS"))
        self.spn_stripes.delete(0, "end");   self.spn_stripes.insert(0, str(s2.get("stripes", 2)))
        self.ent_ps1.delete(0, "end");       self.ent_ps1.insert(0, s2.get("ps1_path", "C:\\Scripts\\Backup-Db.ps1"))

        # 'Run whether...' m·∫∑c ƒë·ªãnh True v√† b·ªã kho√° (ƒë√£ set ·ªü UI)
        self.chk_run_always_var.set(True)

        # RU/RP b·∫Øt bu·ªôc
        self.ent_user.delete(0, "end"); self.ent_user.insert(0, s2.get("user", ""))
        self.ent_pass.delete(0, "end"); self.ent_pass.insert(0, s2.get("pass", ""))

        # SQL Auth (tu·ª≥ ch·ªçn)
        self.ent_sql_user.delete(0, "end"); self.ent_sql_user.insert(0, s2.get("sql_user", ""))
        self.ent_sql_pass.delete(0, "end"); self.ent_sql_pass.insert(0, s2.get("sql_pass", ""))

    def _clear_form(self):
        """Xo√° n·ªôi dung UI khi ch∆∞a c√≥ DB."""
        self.ent_dir.delete(0, "end")
        self.ent_full.delete(0, "end"); self.ent_diff.delete(0, "end"); self.ent_log.delete(0, "end")
        self.ent_instance.delete(0, "end"); self.spn_stripes.delete(0, "end"); self.ent_ps1.delete(0, "end")
        self.chk_run_always_var.set(True)
        self.ent_user.delete(0, "end"); self.ent_pass.delete(0, "end")
        self.ent_sql_user.delete(0, "end"); self.ent_sql_pass.delete(0, "end")

    def _persist_for_current_db(self):
        """L∆∞u th∆∞ m·ª•c ƒë√≠ch cho DB hi·ªán t·∫°i khi ng∆∞·ªùi d√πng nh·∫≠p xong."""
        if not self.current_db: return
        path = self.ent_dir.get().strip() or None
        self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})["backup_dir"] = path
        self.owner.save_config(silent=True)
        self._log(f"‚Ä¢ ƒê√£ l∆∞u th∆∞ m·ª•c l∆∞u tr·ªØ cho [{self.current_db}]")

    # ============================ Storage actions ============================

    def _choose_local_dir(self):
        """Ch·ªçn th∆∞ m·ª•c c·ª•c b·ªô (m√°y ƒëang ch·∫°y UI). L∆ØU √ù: SQL Server service m·ªõi l√† b√™n ghi file."""
        path = filedialog.askdirectory(title="Ch·ªçn th∆∞ m·ª•c (c·ª•c b·ªô)")
        if path:
            if not path.endswith(os.sep): path += os.sep
            self.ent_dir.delete(0, "end"); self.ent_dir.insert(0, path)
            self._persist_for_current_db()

    def _test_write_perm_model(self):
        """
        Ki·ªÉm tra quy·ªÅn ghi c·ªßa SQL Server v√†o th∆∞ m·ª•c ƒë√≠ch b·∫±ng c√°ch backup DB 'model' (nh·∫π).
        - Kh√¥ng ph·ª• thu·ªôc DB ƒëang ch·ªçn (tr√°nh g√¢y t·∫£i tr√™n DB l·ªõn).
        - D√πng COPY_ONLY ƒë·ªÉ file nh·ªè, kh√¥ng ·∫£nh h∆∞·ªüng chu·ªói backup ch√≠nh.
        - C√≥ th·ª≠ xp_dirtree ƒë·ªÉ 'nh√¨n' th∆∞ m·ª•c (kh√¥ng quy·∫øt ƒë·ªãnh quy·ªÅn ghi).
        - Th·ª≠ xo√° file test b·∫±ng xp_cmdshell (n·∫øu t·∫Øt th√¨ b·ªè qua, ch·ªâ log).
        """
        # 1) Ki·ªÉm tra ƒë·∫ßu v√†o/c√°c ƒëi·ªÅu ki·ªán c·∫ßn
        if not self.owner or not getattr(self.owner, "conn", None):
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", "K·∫øt n·ªëi SQL Server tr∆∞·ªõc khi ki·ªÉm tra.")
            return

        # L·∫•y th∆∞ m·ª•c ƒë√≠ch t·ª´ UI (tr√™n M√ÅY CH·∫†Y SQL, kh√¥ng ph·∫£i m√°y UI)
        target_dir = self.ent_dir.get().strip()
        if not target_dir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Nh·∫≠p th∆∞ m·ª•c ƒë√≠ch backup (v√≠ d·ª•: E:\\SQL_Backup\\ ho·∫∑c \\\\server\\share\\path\\).")
            return

        # Hi·ªÉn th·ªã log g·ªçn (xo√° log c≈©)
        self._clear_status()
        self._log("=== KI·ªÇM TRA QUY·ªÄN GHI B·∫∞NG DB 'model' (nh·∫π) ===")

        # 2) Ch·∫°y trong thread ƒë·ªÉ UI kh√¥ng ƒë∆°
        def _work():
            conn = self.owner.conn
            cur = None
            # L∆∞u tr·∫°ng th√°i autocommit hi·ªán t·∫°i ƒë·ªÉ kh√¥i ph·ª•c sau
            prev_autocommit = getattr(conn, "autocommit", False)
            try:
                conn.autocommit = True  # Backup/maintenance n√™n b·∫≠t Autocommit
                cur = conn.cursor()

                # Chu·∫©n ho√° ƒë∆∞·ªùng d·∫´n: k·∫øt th√∫c b·∫±ng "\" n·∫øu l√† path c·ª•c b·ªô
                base = target_dir
                if not (base.endswith("\\") or base.endswith("/")):
                    base += "\\"

                # 2.1) Th·ª≠ 'nh√¨n' th∆∞ m·ª•c b·∫±ng xp_dirtree (c√≥ th·ªÉ b·ªã t·∫Øt ‚Äî ch·ªâ c·∫£nh b√°o)
                try:
                    cur.execute("EXEC master..xp_dirtree ?, 1, 1", (base,))
                    self._log(f"[OK] xp_dirtree nh√¨n th·∫•y th∆∞ m·ª•c: {base}")
                except Exception as e:
                    self._log(f"[CH√ö √ù] xp_dirtree l·ªói (b·ªè qua b∆∞·ªõc n√†y): {e}")

                # 2.2) Sinh ƒë∆∞·ªùng d·∫´n file test (t√™n c√≥ PID ƒë·ªÉ tr√°nh tr√πng)
                import os as _os, time as _time
                test_name = f"model_PERM_TEST_{_os.getpid()}_{int(_time.time())}.bak"
                test_path = base + test_name

                # 2.3) Backup DB 'model' ‚Üí file test (nhanh, nh·ªè)
                # COPY_ONLY: kh√¥ng ghi nh·∫≠n v√†o chu·ªói full/diff hi·ªán h·ªØu
                # COMPRESSION: gi·∫£m I/O ƒëƒ©a v√† m·∫°ng (n·∫øu UNC)
                # INIT, SKIP, CHECKSUM: an to√†n & r√µ r√†ng
                self._log(f"‚Üí T·∫°o file test: {test_path}")
                cur.execute(
                    """
                    BACKUP DATABASE [model]
                    TO DISK = ?
                    WITH COPY_ONLY, INIT, SKIP, CHECKSUM, STATS = 1;
                    """,
                    (test_path,)
                )
                self._log("[OK] ƒê√É GHI file backup test b·∫±ng DB 'model'.")

                # 2.4) Th·ª≠ xo√° file test (n·∫øu xp_cmdshell b·∫≠t)
                try:
                    # L∆∞u √Ω escape d·∫•u " trong ƒë∆∞·ªùng d·∫´n khi ƒë∆∞a v√†o l·ªánh del
                    del_cmd = f'del "{test_path.replace("\"", "\"\"")}"'
                    cur.execute("EXEC master..xp_cmdshell ?", (del_cmd,))
                    self._log("[OK] ƒê√£ xo√° file test b·∫±ng xp_cmdshell.")
                except Exception:
                    # Kh√¥ng sao n·∫øu xp_cmdshell t·∫Øt ‚Äî ch·ªâ nh·∫Øc admin xo√° tay
                    self._log("[CH√ö √ù] xp_cmdshell t·∫Øt/kh√¥ng xo√° ƒë∆∞·ª£c. H√£y xo√° tay file test n·∫øu c·∫ßn.")

                self._log("[K·∫æT LU·∫¨N] SQL Server C√ì th·ªÉ ghi v√†o th∆∞ m·ª•c (test b·∫±ng 'model').")

            except Exception as e:
                # Ghi l·ªói t·ªïng qu√°t
                self._log(f"[TH·∫§T B·∫†I] Kh√¥ng x√°c minh ƒë∆∞·ª£c quy·ªÅn ghi b·∫±ng 'model': {e}")
            finally:
                # Kh√¥i ph·ª•c autocommit
                try:
                    conn.autocommit = prev_autocommit
                except Exception:
                    pass
                # ƒê√≥ng cursor n·∫øu c√≤n
                try:
                    if cur is not None:
                        cur.close()
                except Exception:
                    pass

        threading.Thread(target=_work, daemon=True).start()

    # ============================= Schedule (CRON) =============================

    def _save_schedule(self):
        """L∆∞u 3 d√≤ng CRON (tham kh·∫£o) ‚Äì ph·ª•c v·ª• bi·∫øn sang schtasks."""
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc."); return
        full = self.ent_full.get().strip()
        diff = self.ent_diff.get().strip()
        log  = self.ent_log.get().strip()
        for s, nm in ((full,"FULL"),(diff,"DIFF"),(log,"LOG")):
            if not _CRON_RE.match(s or ""):
                messagebox.showwarning("CRON kh√¥ng h·ª£p l·ªá", f"L·ªãch {nm} ch∆∞a ƒë√∫ng ƒë·ªãnh d·∫°ng (5 tr∆∞·ªùng)."); return
        db_cfg = self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})
        db_cfg.setdefault("schedule", {})["full"] = full
        db_cfg["schedule"]["diff"] = diff
        db_cfg["schedule"]["log"]  = log
        self.owner.save_config(silent=True)
        messagebox.showinfo("ƒê√£ l∆∞u", f"ƒê√£ l∆∞u l·ªãch (tham kh·∫£o) cho [{self.current_db}].")

    # ============================== Manual backup ==============================

    def _run_manual_backup(self):
        """Ch·∫°y BACKUP tr·ª±c ti·∫øp (FULL/DIFF/LOG) ‚Äì ti·ªán ki·ªÉm tra nhanh."""
        if not self.owner.conn:
            messagebox.showwarning("Ch∆∞a k·∫øt n·ªëi", "K·∫øt n·ªëi SQL Server tr∆∞·ªõc."); return
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc khi backup."); return

        per_db = self.owner.config.get("per_db", {})
        bdir = per_db.get(self.current_db, {}).get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y."); return

        btype = self.cbo_type.get().strip().upper()
        self._clear_status()

        def _work():
            try:
                conn = self.owner.conn
                restore_autocommit = getattr(conn, "autocommit", False)
                conn.autocommit = True
                cur = conn.cursor()
                ts = getattr(self.owner, "timestamp_str", lambda: "YYYYMMDD_HHMMSS")()

                if btype == "LOG":
                    target = f"{bdir}{self.current_db}_LOG_{ts}.trn"
                    sql = f"BACKUP LOG [{self.current_db}] TO DISK = ? WITH INIT, SKIP, CHECKSUM, STATS=1"
                elif btype == "DIFF":
                    target = f"{bdir}{self.current_db}_DIFF_{ts}.dif"
                    sql = f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH DIFFERENTIAL, INIT, SKIP, CHECKSUM, STATS=1"
                else:
                    target = f"{bdir}{self.current_db}_FULL_{ts}.bak"
                    sql = f"BACKUP DATABASE [{self.current_db}] TO DISK = ? WITH INIT, SKIP, CHECKSUM, STATS=1"

                self._log(f"‚Üí [{self.current_db}] [{btype}] => {target}")
                cur.execute(sql, (target,))
                self._log("   ‚úì Ho√†n t·∫•t.")
            except Exception as e:
                self._log(f"[L·ªñI] {e}")
            finally:
                try: conn.autocommit = restore_autocommit
                except Exception: pass

        threading.Thread(target=_work, daemon=True).start()

    # ============================ Task Scheduler ============================

    def _choose_ps1_path(self):
        """Ch·ªçn n∆°i l∆∞u script PS1."""
        path = filedialog.asksaveasfilename(
            title="L∆∞u file PowerShell", defaultextension=".ps1",
            filetypes=[("PowerShell Script", "*.ps1"), ("All Files", "*.*")]
        )
        if path:
            self.ent_ps1.delete(0, "end"); self.ent_ps1.insert(0, path)
            self._persist_scheduler_fields()

    def _persist_scheduler_fields(self):
        """L∆∞u c√°c tr∆∞·ªùng Task Scheduler v√†o config DB hi·ªán t·∫°i."""
        if not self.current_db: return
        inst = self.ent_instance.get().strip() or ".\\SQLEXPRESS"
        try:
            stripes = int(self.spn_stripes.get().strip() or "1")
        except Exception:
            stripes = 1
        ps1 = self.ent_ps1.get().strip() or "C:\\Scripts\\Backup-Db.ps1"
        usr = self.ent_user.get().strip()
        pwd = self.ent_pass.get().strip()
        sql_user = self.ent_sql_user.get().strip()
        sql_pass = self.ent_sql_pass.get().strip()

        db_cfg = self.owner.config.setdefault("per_db", {}).setdefault(self.current_db, {})
        sch = db_cfg.setdefault("scheduler", {})
        sch["instance"] = inst
        sch["stripes"]  = stripes
        sch["ps1_path"] = ps1
        sch["run_always"] = True  # c·ªë ƒë·ªãnh theo y√™u c·∫ßu
        sch["user"] = usr
        sch["pass"] = pwd
        sch["sql_user"] = sql_user
        sch["sql_pass"] = sql_pass
        self.owner.save_config(silent=True)

    def _generate_ps1(self):
        """
        Sinh script PowerShell:
        - C√≥ ghi log (BasePath\\_TaskLogs\\DB.log)
        - H·ªó tr·ª£ SqlUser/SqlPass (n·∫øu t√†i kho·∫£n Windows kh√¥ng c√≥ quy·ªÅn SQL)
        - X·ª≠ l√Ω l·ªói: ghi FAIL v√†o log v√† n√©m ngo·∫°i l·ªá (ƒë·ªÉ Task th·∫•y LastRun != 0)
        """
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc."); return

        per_db = self.owner.config.get("per_db", {})
        bdir = per_db.get(self.current_db, {}).get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y."); return

        inst = self.ent_instance.get().strip() or ".\\SQLEXPRESS"
        try:
            stripes = int(self.spn_stripes.get().strip() or "1")
        except Exception:
            stripes = 1

        ps1_path = self.ent_ps1.get().strip() or "C:\\Scripts\\Backup-Db.ps1"

        # LogPath: <BasePath>\_TaskLogs\<DB>.log
        log_dir = os.path.join(bdir.rstrip("\\/"), "_TaskLogs")
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, f"{self.current_db}.log")

        self._persist_scheduler_fields()

        # Script PS1 (SqlUser/SqlPass tu·ª≥ ch·ªçn)
        ps1_content = f"""param(
  [Parameter(Mandatory=$true)] [string]$Instance,
  [Parameter(Mandatory=$true)] [string]$Database,
  [Parameter(Mandatory=$true)] [string]$BasePath,
  [Parameter(Mandatory=$true)] [ValidateSet("Full","Diff","Log")] [string]$Type,
  [Parameter(Mandatory=$true)] [int]$Stripes,
  [Parameter(Mandatory=$true)] [string]$LogPath,
  [Parameter(Mandatory=$false)] [string]$SqlUser,
  [Parameter(Mandatory=$false)] [string]$SqlPass
)

$ErrorActionPreference = "Stop"

function Write-Log($ok, $targets) {{
  try {{
    $ts = (Get-Date).ToString("s")
    $status = if ($ok) {{ "OK" }} else {{ "FAIL" }}
    $files = ($targets -join ";")
    "$ts|$Database|$Type|$status|$files" | Add-Content -LiteralPath $LogPath -Encoding UTF8
  }} catch {{ }}
}}

# 1) T·∫°o th∆∞ m·ª•c ƒë√≠ch theo ng√†y
$day = Get-Date -Format "yyyyMMdd"
$dir = Join-Path $BasePath (Join-Path $Database (Join-Path $Type $day))
New-Item -ItemType Directory -Force -Path $dir | Out-Null

# 2) Danh s√°ch file striped
$time   = Get-Date -Format "HHmmss"
$ext    = if ($Type -eq "Log") {{ "trn" }} elseif ($Type -eq "Diff") {{ "dif" }} else {{ "bak" }}
$targets = @()
for ($i=1; $i -le $Stripes; $i++) {{
  $targets += (Join-Path $dir ("{self.current_db}_$($Type.ToUpper())_${{time}}_$i.$ext"))
}}
$disks = ($targets | ForEach-Object {{ "DISK = N'" + $_.Replace("'", "''") + "'" }}) -join ", "

# 3) Ch·ªçn chu·ªói T-SQL theo Type
if ($Type -eq "Full") {{
  $tsql = @"
IF SERVERPROPERTY('EngineEdition') <> 4
BEGIN
  BACKUP DATABASE [{self.current_db}]
  TO $disks
  WITH COMPRESSION, CHECKSUM, STATS = 5;
END
ELSE
BEGIN
  BACKUP DATABASE [{self.current_db}]
  TO $disks
  WITH CHECKSUM, STATS = 5;
END;
RESTORE VERIFYONLY FROM $disks WITH CHECKSUM;
"@
}}
elseif ($Type -eq "Diff") {{
  $tsql = @"
BACKUP DATABASE [{self.current_db}]
TO $disks
WITH DIFFERENTIAL, CHECKSUM, STATS = 5;
"@
}}
else {{
  $tsql = @"
IF EXISTS (
  SELECT 1
  FROM sys.dm_exec_requests
  WHERE command IN ('BACKUP DATABASE','BACKUP LOG')
    AND database_id = DB_ID(N'{self.current_db}')
)
BEGIN
  PRINT 'Backup in progress. Skipping LOG backup.';
  RETURN;
END;

BACKUP LOG [{self.current_db}]
TO $disks
WITH CHECKSUM, STATS = 5;
"@
}}

# 4) G·ªçi sqlcmd: ∆∞u ti√™n SQL Auth n·∫øu c√≥, n·∫øu kh√¥ng d√πng -E
try {{
  if ([string]::IsNullOrWhiteSpace($SqlUser) -or [string]::IsNullOrWhiteSpace($SqlPass)) {{
    & sqlcmd -S $Instance -d master -E -b -Q $tsql
  }} else {{
    & sqlcmd -S $Instance -d master -U $SqlUser -P $SqlPass -b -Q $tsql
  }}
  if ($LASTEXITCODE -ne 0) {{ throw "Backup failed with exit code $LASTEXITCODE" }}
  Write-Log $true $targets
}}
catch {{
  Write-Log $false $targets
  throw
}}
"""
        try:
            os.makedirs(os.path.dirname(ps1_path), exist_ok=True)
            with open(ps1_path, "w", encoding="utf-8") as f:
                f.write(ps1_content)
            self._log(f"[OK] ƒê√£ ghi PS1: {ps1_path}\n‚Ä¢ Log: {log_path}\n‚Ä¢ H·ªó tr·ª£ SqlUser/SqlPass (n·∫øu c·∫ßn).")
            messagebox.showinfo("T·∫°o PS1", f"ƒê√£ t·∫°o script:\n{ps1_path}\nScript h·ªó tr·ª£ SQL Auth tu·ª≥ ch·ªçn.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng l∆∞u ƒë∆∞·ª£c PS1: {e}")

    def _task_names(self) -> Dict[str, str]:
        """T√™n 3 task chu·∫©n ho√° theo DB."""
        db = self.current_db or "DB"
        return {"FULL": f"BK_FULL_{db}", "DIFF": f"BK_DIFF_{db}", "LOG": f"BK_LOG_{db}"}

    def _build_one_cmd(self, task_name: str, cron_expr: str, task_type: str,
                       ps_base_exec: str, user: str, pwd: str) -> str:
        """
        Sinh l·ªánh schtasks cho 1 Task:
          - B·∫ÆT BU·ªòC /RU /RP (Run whether user is logged on or not)
          - /RL HIGHEST, KH√îNG d√πng /IT (ƒë·ªÉ ch·∫°y n·ªÅn, kh√¥ng m·ªü console)
        """
        if not user or not pwd:
            raise ValueError("C·∫ßn nh·∫≠p User/Password (Windows) ƒë·ªÉ t·∫°o task ch·∫°y n·ªÅn.")

        args = cron_to_schtasks_args(cron_expr)
        base = f'schtasks /Create /TN "{task_name}" /RL HIGHEST /F /RU "{user}" /RP "{pwd}" '

        if args["type"] == "MINUTE":
            return (base + f'/SC MINUTE /MO {args["mo"]} /ST {args["st"]} /DU {args["du"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        if args["type"] == "DAILY":
            return (base + f'/SC DAILY /ST {args["st"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        if args["type"] == "WEEKLY":
            dlist = args.get("dlist", "")
            if not dlist:
                raise ValueError("CRON tu·∫ßn c·∫ßn danh s√°ch th·ª© (MON,TUE,...).")
            return (base + f'/SC WEEKLY /D {dlist} /ST {args["st"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        if args["type"] == "MONTHLY":
            dom = args.get("dom", "")
            return (base + f'/SC MONTHLY /D {dom} /ST {args["st"]} '
                    + f'/TR "{ps_base_exec} -Type {task_type}"')

        raise ValueError("Kh√¥ng h·ªó tr·ª£ lo·∫°i CRON n√†y.")

    def _build_schtasks_cmds(self) -> Optional[Dict[str, str]]:
        """
        K·∫øt h·ª£p m·ªçi d·ªØ li·ªáu hi·ªán t·∫°i th√†nh 3 l·ªánh schtasks.
        - Ki·ªÉm tra PS1 t·ªìn t·∫°i tr∆∞·ªõc
        - B·∫Øt bu·ªôc c√≥ User/Pass
        - G·∫Øn SqlUser/SqlPass v√†o /TR n·∫øu c√≥
        """
        if not self.current_db:
            messagebox.showwarning("Ch∆∞a ch·ªçn CSDL", "Ch·ªçn CSDL tr∆∞·ªõc."); return None

        per_db = self.owner.config.get("per_db", {})
        db_cfg = per_db.get(self.current_db, {})
        bdir = db_cfg.get("backup_dir")
        if not bdir:
            messagebox.showwarning("Thi·∫øu th√¥ng tin", "Ch∆∞a c√≥ th∆∞ m·ª•c l∆∞u tr·ªØ cho CSDL n√†y."); return None

        schd = db_cfg.get("schedule", {})
        cron_full = schd.get("full", "")
        cron_diff = schd.get("diff", "")
        cron_log  = schd.get("log",  "")

        sch2 = db_cfg.get("scheduler", {})
        inst = (sch2.get("instance") or self.ent_instance.get().strip() or ".\\SQLEXPRESS").replace('"','\\"')
        try:
            stripes = int(str(sch2.get("stripes", self.spn_stripes.get().strip() or "1")))
        except Exception:
            stripes = 1
        ps1_path_in = (sch2.get("ps1_path") or self.ent_ps1.get().strip() or "C:\\Scripts\\Backup-Db.ps1")
        user = sch2.get("user") or self.ent_user.get().strip()
        pwd  = sch2.get("pass") or self.ent_pass.get().strip()
        sql_user = (sch2.get("sql_user") or self.ent_sql_user.get().strip() or "")
        sql_pass = (sch2.get("sql_pass") or self.ent_sql_pass.get().strip() or "")

        if not os.path.isfile(ps1_path_in):
            messagebox.showerror("Thi·∫øu script PS1", f"Kh√¥ng t√¨m th·∫•y file PS1:\n{ps1_path_in}\nH√£y t·∫°o b·∫±ng '‚úçÔ∏è T·∫°o file PS1' tr∆∞·ªõc.")
            return None

        # LogPath m·∫∑c ƒë·ªãnh
        log_dir = os.path.join(bdir.rstrip("\\/"), "_TaskLogs")
        os.makedirs(log_dir, exist_ok=True)
        log_path = os.path.join(log_dir, f"{self.current_db}.log")

        # Chu·ªói /TR: PowerShell ch·∫°y ·∫©n (kh√¥ng popup n·∫øu l√† 'Run whether...' + /RL Highest)
        dbn  = self.current_db.replace('"','\\"')
        base = bdir.rstrip("\\/").replace('"','\\"')
        ps1  = ps1_path_in.replace('"','\\"')

        ps_exec = (f'powershell.exe -WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass '
                   f'-File "{ps1}" -Instance "{inst}" -Database "{dbn}" -BasePath "{base}" '
                   f'-Stripes {stripes} -LogPath "{log_path}"')

        # N·∫øu c√≥ SQL Auth ‚Üí g·∫Øn k√®m ƒë·ªÉ ƒë·∫£m b·∫£o quy·ªÅn tr√™n SQL
        # if sql_user and sql_pass:
        #     ps_exec += f' -SqlUser "{sql_user.replace(\'"\', \'\\\"\')}" -SqlPass "{sql_pass.replace(\'"\', \'\\\"\')}"'

        names = self._task_names()
        cmds: Dict[str, str] = {}
        try:
            cmds[names["FULL"]] = self._build_one_cmd(names["FULL"], cron_full, "Full", ps_exec, user, pwd)
            cmds[names["DIFF"]] = self._build_one_cmd(names["DIFF"], cron_diff, "Diff", ps_exec, user, pwd)
            cmds[names["LOG"]]  = self._build_one_cmd(names["LOG"],  cron_log,  "Log",  ps_exec, user, pwd)
        except ValueError as e:
            messagebox.showerror("CRON/Th√¥ng tin ch∆∞a h·ª£p l·ªá", str(e)); return None

        self._persist_scheduler_fields()
        return cmds
        
    def _task_exists(self, task_name: str) -> bool:
        try:
            proc = subprocess.run(['schtasks','/Query','/TN',task_name], capture_output=True, text=True, shell=False)
            return proc.returncode == 0
        except Exception as e:
            self._log(f"[L·ªñI] Query task {task_name}: {e}")
            return False

    def _check_tasks(self):
        names = self._task_names()
        self._clear_status()
        self._log("=== Ki·ªÉm tra Task Scheduler ===")
        for label, tname in [("FULL", names["FULL"]), ("DIFF", names["DIFF"]), ("LOG", names["LOG"])]:
            exists = self._task_exists(tname)
            self._log(f"{label}: {tname} -> {'ƒê√É T·ªíN T·∫†I' if exists else 'CH∆ØA C√ì'}")
        messagebox.showinfo("Ki·ªÉm tra task", "ƒê√£ ho√†n t·∫•t qu√° tr√¨nh ki·ªÉm tra.\nXem k·∫øt qu·∫£ trong khung tr·∫°ng th√°i b√™n d∆∞·ªõi.")

    def _create_tasks_elevated(self):
        """
        T·∫°o 3 task b·∫±ng schtasks:
        - G·ªôp l·ªánh v√†o 1 .cmd t·∫°m
        - M·ªü cmd.exe 'Run as Administrator' ƒë·ªÉ th·ª±c thi (UAC)
        - D√πng /RU /RP (b·∫Øt bu·ªôc), /RL HIGHEST, KH√îNG /IT
        """
        cmds = self._build_schtasks_cmds()
        if not cmds: return
        try:
            with tempfile.NamedTemporaryFile(prefix="create_tasks_", suffix=".cmd", delete=False, mode="w", encoding="utf-8") as tf:
                batch_path = tf.name
                tf.write("@echo on\r\n")
                for _, cmd in cmds.items():
                    tf.write(cmd + "\r\n")
                tf.write("echo.\r\n")
                tf.write("echo ===== Done. Press any key to close... =====\r\n")
                tf.write("pause > nul\r\n")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng t·∫°o ƒë∆∞·ª£c file batch: {e}"); return

        try:
            self._log(f"‚Üí M·ªü Administrator v√† t·∫°o task b·∫±ng: {batch_path}")
            rc = ctypes.windll.shell32.ShellExecuteW(None, "runas", "cmd.exe", f'/c "{batch_path}"', None, 1)
            if rc <= 32:
                messagebox.showerror("Kh√¥ng th·ªÉ n√¢ng quy·ªÅn", f"M√£ l·ªói ShellExecute: {rc}\nH√£y ch·∫°y tay file:\n{batch_path}")
            else:
                messagebox.showinfo("ƒêang t·∫°o task", "C·ª≠a s·ªï Administrator ƒë√£ m·ªü ƒë·ªÉ t·∫°o task.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·∫°y n√¢ng quy·ªÅn: {e}\nH√£y ch·∫°y tay file:\n{batch_path}")

    def _delete_tasks_elevated(self):
        """Xo√° 3 task t∆∞∆°ng ·ª©ng DB hi·ªán t·∫°i (n√¢ng quy·ªÅn Admin)."""
        names = self._task_names()
        try:
            with tempfile.NamedTemporaryFile(prefix="delete_tasks_", suffix=".cmd", delete=False, mode="w", encoding="utf-8") as tf:
                batch_path = tf.name
                tf.write("@echo on\r\n")
                for tname in [names["FULL"], names["DIFF"], names["LOG"]]:
                    tf.write(f'schtasks /Delete /TN "{tname}" /F\r\n')
                tf.write("echo.\r\n")
                tf.write("echo ===== Done. Press any key to close... =====\r\n")
                tf.write("pause > nul\r\n")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng t·∫°o ƒë∆∞·ª£c file batch: {e}"); return

        try:
            self._log(f"‚Üí M·ªü Administrator v√† xo√° task b·∫±ng: {batch_path}")
            rc = ctypes.windll.shell32.ShellExecuteW(None, "runas", "cmd.exe", f'/c "{batch_path}"', None, 1)
            if rc <= 32:
                messagebox.showerror("Kh√¥ng th·ªÉ n√¢ng quy·ªÅn", f"M√£ l·ªói ShellExecute: {rc}\nH√£y ch·∫°y tay file:\n{batch_path}")
            else:
                messagebox.showinfo("ƒêang xo√° task", "C·ª≠a s·ªï Administrator ƒë√£ m·ªü ƒë·ªÉ xo√° task.")
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ch·∫°y n√¢ng quy·ªÅn: {e}\nH√£y ch·∫°y tay file:\n{batch_path}")

    def _show_commands(self):
        """Hi·ªÉn th·ªã c√°c l·ªánh schtasks ƒë·ªÉ copy (t·ª± ch·∫°y trong CMD/Powershell Admin)."""
        cmds = self._build_schtasks_cmds()
        if not cmds: return
        self._clear_status()
        self._log("=== L·ªánh schtasks (copy & ch·∫°y trong PowerShell/Command Prompt Run as Administrator) ===")
        for name, cmd in cmds.items():
            self._log(f"\n# {name}\n{cmd}")
        messagebox.showinfo("L·ªánh ƒë√£ s·∫µn s√†ng",
                            "C√°c l·ªánh ƒë√£ hi·ªÉn th·ªã trong √¥ tr·∫°ng th√°i ph√≠a d∆∞·ªõi.\n"
                            "H√£y m·ªü PowerShell/Command Prompt 'Run as Administrator' v√† copy ch·∫°y.")

    # ================================ Utils ================================

    def _log(self, s: str):
        """Ghi 1 d√≤ng v√†o khung tr·∫°ng th√°i."""
        self.status_box.configure(state="normal")
        self.status_box.insert("end", s + "\n")
        self.status_box.see("end")
        self.status_box.configure(state="disabled")

    def _clear_status(self):
        """Xo√° to√†n b·ªô khung tr·∫°ng th√°i."""
        self.status_box.configure(state="normal")
        self.status_box.delete("1.0", "end")
        self.status_box.configure(state="disabled")